{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/avatar.1.jpg","path":"css/images/avatar.1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/compare_width.png","path":"css/images/compare_width.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/Running-scripts-in-WebKit.png","path":"css/images/Running-scripts-in-WebKit.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/MVVM.png","path":"css/images/angular-img/MVVM.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/compile.png","path":"css/images/angular-img/compile.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/di.png","path":"css/images/angular-img/di.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/directive-execute-order.png","path":"css/images/angular-img/directive-execute-order.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/pub-sub.png","path":"css/images/angular-img/pub-sub.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/README.md","hash":"25c75503f044b817297995a96621c92ce037a098","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/_config.yml","hash":"f7ca18ee0611db441a74ec5d77a926b00ed714f6","modified":1493708250794},{"_id":"themes/hexo-theme-icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1493701707386},{"_id":"source/_posts/Running-scripts-in-WebKit.md","hash":"b61571029ff60d3b2ac3da74c6adecef52266334","modified":1493806437156},{"_id":"source/_posts/angular-bootstrap和scope解析.md","hash":"09d9beb8cbcb57424287a1d4f49f2b9a8db45460","modified":1495622115198},{"_id":"source/_posts/angular-directive.md","hash":"0c77a72cca218e157243f29367566a26be64c9db","modified":1493806964220},{"_id":"source/_posts/angular-module和DI详解.md","hash":"a771d02d0e885fe03e6a06119804cc7e24c3ac9a","modified":1494816832000},{"_id":"source/_posts/Array.md","hash":"765d0a0cd00d04246257acbcc9cd377aaa5b2945","modified":1493792050024},{"_id":"source/_posts/angular-component.md","hash":"31f5576fd91ddf7fbcb53a66f6e8c663f56d5ff9","modified":1493806946544},{"_id":"source/_posts/Object.md","hash":"f39291f0ca00fe61d9441eb59db90ef17342d595","modified":1493722085546},{"_id":"source/_posts/es6学习笔记-二.md","hash":"966134e38d88b6752163eb98567fa57ac9ac564a","modified":1493806508148},{"_id":"source/_posts/react学习.md","hash":"8a371516be1fa1e5f8efccf8d13e9469221697de","modified":1494835213000},{"_id":"source/_posts/es6学习笔记-一.md","hash":"0c586015ea596cc8385ec31cccee06ca214dc53d","modified":1493806509056},{"_id":"source/_posts/原生js获取位置、寬高属性值.md","hash":"a8d3217d122a21433a8556c9a461fb0ba6088f95","modified":1493802445460},{"_id":"source/_posts/ubuntu.md","hash":"31bba05fe41b866db6d50fea3a9a9d85ea49125f","modified":1493871531000},{"_id":"source/_posts/mongodb笔记.md","hash":"1eb85b937a079a3eadce60b2cebf55f6d8046591","modified":1493807052272},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1493705116490},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1493705123850},{"_id":"themes/hexo-theme-icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/layout/comment/changyan.ejs","hash":"b4bd2e641af59e06becaa8f2dc97867f023b8dcf","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/comment/counter.ejs","hash":"466e01abb13d0a2b9ed281b2362740baa32afaff","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/comment/index.ejs","hash":"170e722e640593a46c38da2331b6afccfb69c449","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/comment/scripts.ejs","hash":"30aa478e771ad6e6d1dba1060deb5c44ef34546c","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1493701707338},{"_id":"themes/hexo-theme-icarus/layout/common/article.ejs","hash":"e8f992d1eb2bbecb5fbb0fa901a5dbd50398f922","modified":1493709004450},{"_id":"themes/hexo-theme-icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/comment/disqus.ejs","hash":"4aaeb9501d5f9a4b55c8be578a899e96a1608dc1","modified":1493802359672},{"_id":"themes/hexo-theme-icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/plugin/scripts.ejs","hash":"b349c7089a44302eaa8291c0ed13ef815f868a68","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/style.styl","hash":"1716b199dba80b26086f325d69c36fa682465106","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/js/main.js","hash":"93dc932946e2898bf4f39c42af1b27295e886af1","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/post/banner.ejs","hash":"020f6892180a682fc8b794f9791afc990d380768","modified":1493704860766},{"_id":"themes/hexo-theme-icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/post/nav.ejs","hash":"e362576e84d58a8a81782ab911700bd4a052d587","modified":1493709059910},{"_id":"themes/hexo-theme-icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1493701707382},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_partial/article.styl","hash":"512b9252e1799b93a17c4ad847b0586814a030b4","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_partial/profile.styl","hash":"fb0170075dc2a41e01dd11bbfdbccbed544c479a","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/images/avatar.1.jpg","hash":"0ae1ee63172c28d826943f772606d6fa9bf828a1","modified":1493707829646},{"_id":"themes/hexo-theme-icarus/source/css/images/avatar.jpg","hash":"0ae1ee63172c28d826943f772606d6fa9bf828a1","modified":1493702519736},{"_id":"themes/hexo-theme-icarus/source/css/images/compare_width.png","hash":"94e9a7c55d444b9b8f3512d578ce79cd7f58d785","modified":1493712644426},{"_id":"themes/hexo-theme-icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1493701707386},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/css/images/Running-scripts-in-WebKit.png","hash":"68eb51a5322f1723fd7a46c8c70c9b19c09067d9","modified":1493803138730},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/MVVM.png","hash":"99c3fcc0f3e504d0a47a777e9285b8c957fd6117","modified":1495611295807},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/compile.png","hash":"acc4a3253de0b13d56949064885066546e746d05","modified":1495526203500},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/di.png","hash":"fa51fcb5c0ed99275ce0c947e54325aac9057e75","modified":1495526207740},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/directive-execute-order.png","hash":"46007e85b12d5aa384e712b8b98756b3edb1754b","modified":1495526214913},{"_id":"themes/hexo-theme-icarus/source/css/images/angular-img/pub-sub.png","hash":"83e9d417bb9bb67fd2f500d87b009ea79e34dae8","modified":1495619425943},{"_id":"themes/hexo-theme-icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1493701707394},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1493701707398},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1493701707406},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1493701707398},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1493701707398},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1493701707402},{"_id":"themes/hexo-theme-icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1493701707398},{"_id":"public/content.json","hash":"6b68c5b5f38cfaa00b2fbd9dee29886838aab25d","modified":1495622119525},{"_id":"public/categories/index.html","hash":"3d101b4fb213c450fa81a2c81eff257c79912afe","modified":1495622119930},{"_id":"public/tags/index.html","hash":"f07109fdf6a984d27900e6be3e63a79ec1335c10","modified":1495622119991},{"_id":"public/archives/2016/04/index.html","hash":"6a563527eb544608066f9d3317f06708ea395266","modified":1495622119992},{"_id":"public/archives/2016/05/index.html","hash":"9432a445efbaf991229b3d5c9251f7bb84dc5b31","modified":1495622119992},{"_id":"public/archives/2016/07/index.html","hash":"d8d15c4ff48f37a5f334563c8e9b00a4f4df0af4","modified":1495622119992},{"_id":"public/archives/2016/08/index.html","hash":"ab7381e6bc4b86524057c917137e62c9ebf8d010","modified":1495622119992},{"_id":"public/archives/2016/09/index.html","hash":"d76683eda599227b6cc6f9ee2784081a3cc5caad","modified":1495622119992},{"_id":"public/archives/2016/10/index.html","hash":"97e696707061377362c3b503d324750f1421f36e","modified":1495622119992},{"_id":"public/archives/2017/10/index.html","hash":"3033acab5f2d35b14730c97c731ea5218c3ac7b0","modified":1495622119992},{"_id":"public/tags/es6/index.html","hash":"07e0d52980f642c089ad81e230df9992a21a831c","modified":1495622119992},{"_id":"public/tags/ubuntu/index.html","hash":"7dcc5a5bb5370e253e0fc91eafd0c85bda2aa341","modified":1495622119993},{"_id":"public/tags/mongodb/index.html","hash":"151398e345db102b19f848a22827ddbb5c9ab388","modified":1495622119993},{"_id":"public/2016/04/06/mongodb笔记/index.html","hash":"1b08d6ffc2e277203274951e0eea9fdc7508a794","modified":1495622119993},{"_id":"public/2016/05/03/ubuntu/index.html","hash":"d3cf4b76da7847057ea4b34dcf50215bdb8688e5","modified":1495622119993},{"_id":"public/2016/07/03/Running-scripts-in-WebKit/index.html","hash":"d470f394d0d379db9b9bcbe5ca699acd3df7e1aa","modified":1495622119993},{"_id":"public/2016/08/28/原生js获取位置、寬高属性值/index.html","hash":"0fc8d2693364cb57a48696393889391772397597","modified":1495622119993},{"_id":"public/2016/09/02/es6学习笔记-一/index.html","hash":"66c090f71af4bb42e7a79442d9a0d358b35ba0fb","modified":1495622119993},{"_id":"public/2016/09/08/es6学习笔记-二/index.html","hash":"60dfa14e2b8ac7d611c6aa04e0f4585301b34c31","modified":1495622119993},{"_id":"public/2016/10/03/angular-component/index.html","hash":"085a0e5e5ef021b265bb9351ede60411c0c666ef","modified":1495622119993},{"_id":"public/2017/05/02/Array/index.html","hash":"af131d1152867e4af603bef169322fc311084049","modified":1495622119993},{"_id":"public/2017/05/02/Object/index.html","hash":"a4d36ed384c8295e4a8a39389a62cb4875d9646a","modified":1495622119993},{"_id":"public/2017/10/06/angular-directive/index.html","hash":"b3cffd03b6e0597070e6e1d87c3aafae8bdd7061","modified":1495622119993},{"_id":"public/archives/index.html","hash":"b3f1e228f6a6b0d12f9567eeb959b7598a18cf88","modified":1495622119993},{"_id":"public/archives/2016/index.html","hash":"7de6f5a88e25bea2de2a6a326d76bc36fd189641","modified":1495622119993},{"_id":"public/archives/2017/index.html","hash":"2c6003d5c3daa9c77edcead9e8dd14214c5832ff","modified":1495622119993},{"_id":"public/archives/2017/05/index.html","hash":"a3ec0efad511f4dc1cd56221582ffd17507501be","modified":1495622119994},{"_id":"public/index.html","hash":"bc18a5dab23800e0ee2ad05f58d930cd59e18232","modified":1495622119994},{"_id":"public/tags/javascript/index.html","hash":"939e38145e9ed4fa3c84a2a4da97578b92b7517d","modified":1495622119994},{"_id":"public/tags/angular/index.html","hash":"6a4f56c6a2a467f99d4538627eeae5c4813221f9","modified":1495622119994},{"_id":"public/archives/page/2/index.html","hash":"5479dac15708dd3877bad3ec021417ce78654849","modified":1495622120000},{"_id":"public/tags/react/index.html","hash":"2b817d0bd0921c1180ff4986853e76df6101e21c","modified":1495622120001},{"_id":"public/2017/05/11/react学习/index.html","hash":"5af899ab72dfc0b53947a880135f9a5914cd189b","modified":1495622120001},{"_id":"public/2017/05/12/angular-module和DI详解/index.html","hash":"efbbf4c08321f839895c4269919882aa2c6ff6e6","modified":1495622120001},{"_id":"public/2017/05/24/angular-bootstrap和scope解析/index.html","hash":"4b3c2647e406d70057bb127eb2e4d3cecefb9441","modified":1495622120001},{"_id":"public/page/2/index.html","hash":"0833c4726c4f122d551b915a4325b3b824b3c32d","modified":1495622120002},{"_id":"public/css/images/angular-img/MVVM.png","hash":"99c3fcc0f3e504d0a47a777e9285b8c957fd6117","modified":1495622120006},{"_id":"public/css/images/angular-img/di.png","hash":"fa51fcb5c0ed99275ce0c947e54325aac9057e75","modified":1495622120008},{"_id":"public/css/images/angular-img/directive-execute-order.png","hash":"46007e85b12d5aa384e712b8b98756b3edb1754b","modified":1495622120008},{"_id":"public/css/images/angular-img/compile.png","hash":"acc4a3253de0b13d56949064885066546e746d05","modified":1495622120009},{"_id":"public/css/images/angular-img/pub-sub.png","hash":"83e9d417bb9bb67fd2f500d87b009ea79e34dae8","modified":1495622120009}],"Category":[],"Data":[],"Page":[{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2017-05-02T06:05:16.494Z","updated":"2017-05-02T06:05:16.490Z","path":"categories/index.html","comments":1,"_id":"cj32upm05000109rtgg1dr3fw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2017-05-02T06:05:23.850Z","updated":"2017-05-02T06:05:23.850Z","path":"tags/index.html","comments":1,"_id":"cj32upm0a000309rto5ld1i1a","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Running scripts in WebKit","date":"2016-07-03T09:17:04.000Z","thumbnail":"/css/images/Running-scripts-in-WebKit.png","_content":"\n![](/css/images/Running-scripts-in-WebKit.png)","source":"_posts/Running-scripts-in-WebKit.md","raw":"---\ntitle: Running scripts in WebKit\ndate: 2016-07-03 17:17:04\ntags: javascript\nthumbnail: /css/images/Running-scripts-in-WebKit.png\n---\n\n![](/css/images/Running-scripts-in-WebKit.png)","slug":"Running-scripts-in-WebKit","published":1,"updated":"2017-05-03T10:13:57.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32uplzy000009rt1wxitlvp","content":"<p><img src=\"/css/images/Running-scripts-in-WebKit.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/css/images/Running-scripts-in-WebKit.png\" alt=\"\"></p>\n"},{"title":"angular bootstrap和scope解析","date":"2017-05-24T10:16:51.000Z","_content":"\n\n- ## angular启动过程\n\n- ## scope\n\n---\n\n## angular启动过程\n\n1. ### 定义\n\n> angular.module提供创建组件的方法，是一系列任务的集合。每个模块内部维护_invokeQueue数组\n\n    ```javascript\n        angular.module('app',[])\n        moduleInstance={\n            name:,\n            requires:,\n            constant:,\n            provider:,\n            factory:,\n            value:,\n            service:,\n            filter:$filterProvider服务的方法,\n            directive:$compileProvider服务的方法,\n            controller:$controllerProvider服务的方法,\n            component:$compileProvider服务的方法,\n            config:,\n            run: \n        }\n\n    ```\n\n内置的ng模块 包含angular框架的核心服务($compile,$rootScope等)\n\n2. ### 注册\n\n> createInjector() 遍历模块及其依赖，执行_invokeQueue中定义的各种组件\n\n```javascript\n    angular.bootstap=function(ele,modules){\n        modules=modules||[]\n        modules.unshift('ng')\n        createInjector(modules)\n    } \n\n```\n![](/css/images/angular-img/di.png)\n\n3. ### compile DOM, DOM linked to scope\n\n$compile\n\n```javascript\n    var injector=createInjector(modules);\n    injector.invoke([$compile,$rootScope,function($compile,$rootScope){\n        $compile($element)($rootScope);\n    }]);\n```\n\n> This also means that at this point the initial scope hierarchy of the application is constructed.  Any directives that use inherited or isolate scopes will cause new scopes to be created and linked. All of that is handled by the compiler.   \n\n![](/css/images/angular-img/directive-execute-order.png)\n\n![](/css/images/angular-img/compile.png)\n\n4. ### 初始运行一次脏检测。\n\n```javascript\n    var injector=createInjector(modules);\n    injector.invoke([$compile,$rootScope,function($compile,$rootScope){\n        $rootScope.$apply(function(){\n             $compile($element)($rootScope);\n        })\n    }]); \n```\n\n## scope\n\n渲染数据到模板的上下文，model需要挂载在scope上。\n\nview和controller之间的桥梁\n\ncontroller: 初始化$scope,为$scope添加行为\n\n![](/css/images/angular-img/MVVM.png)\n\n\n\nscope做的事：\n\n-  模型和视图的桥梁 数据绑定 脏检测\n-  scope层级关系，作用域继承\n-  广播、监听事件\n\n\n\n### dirty-checking\n\n\n ```javascript\n\n    .controller($scope){\n        $scope.user.name=''\n        $scope.$watch('user.name',function(){ \n        })\n    }\n\n ```\n\n> 内部维护$$watchers数组 存放  $watch(watchFN,listenFN) \n\n  ```javascript\n\n    $$watchers.push({\n        watchFn:watchf,\n        listenerFn:listenf\n    })\n\n  ```   \n\n> $digest 迭代$$watchers数组,对每一条watcher,比较监听的变量前后两次值是否相同，不同则执行监听函数。\n\n  ```javascript\n\n    Scope.prototype.$digest = function() {\n        var self = this;\n        var newValue, oldValue;\n        _.forEach(this.$$watchers, function(watcher) {\n            newValue = watcher.watchFn(self);\n            oldValue = watcher.last;\n            if (newValue !== oldValue) {\n                watcher.last = newValue;\n                watcher.listenerFn(newValue, oldValue, self);\n            }\n        });\n    };\n\n  ``` \n> 只要有变化，脏检测就会一直循环执行，直到所有监听的值都不在改变。\n\n  ```javascript\n\n        Scope.prototype.$$digestOnce = function() {\n            var self = this;\n             var newValue, oldValue, dirty;\n            _.forEach(this.$$watchers, function(watcher) {\n                newValue = watcher.watchFn(self);\n                oldValue = watcher.last;\n                if (newValue !== oldValue) {\n                    watcher.last = newValue;\n                    watcher.listenerFn(newValue,\n                    (oldValue === initWatchVal ? newValue : oldValue), self);\n                    dirty = true;\n                 }\n            });\n                                                                                                        return dirty;\n        };\n\n        Scope.prototype.$digest = function() {\n            var dirty;\n            do {\n                dirty = this.$$digestOnce();\n            } while (dirty);\n        };\n\n  ```\n\n$evel   以当前scope作为上下文执行\n\n  ```javascript\n\n        Scope.prototype.$eval = function(expr, locals) {\n            return expr(this, locals);\n        };\n\n  ```\n\n  $apply \n  ```\n    Scope.prototype.$apply = function(expr) {\n        try {\n            return this.$eval(expr);\n        } finally {\n            this.$digest();\n        }\n    };\n  ```\n\n### 作用域继承\n\n$rootScope.$new()\n\n```javascript\n\n    Scope.prototype.$new = function() {\n        var ChildScope = function() { };\n        ChildScope.prototype = this;\n        var child = new ChildScope();\n        this.$$children.push(child);\n        child.$$watchers = [];\n        child.$$children = [];\n        return child;\n    };\n\n```\n\n> ngController创建新的作用域，每一个controller构造函数执行的时候都会传入一个新创建的子作用域\n\n>$digest() 只有当前scope及其子scope的$$watchers执行\n\n```javascript\n\n   Scope.prototype.$$everyScope = function(fn) {\n        if (fn(this)) {\n            return this.$$children.every(function(child) {\n            return child.$$everyScope(fn);\n        });\n        } else {\n            return false;\n        }\n    };\n```\n\n> $apply  goes directly to the root and digests the whole scope hierarchy\n  \n```javascript\n\nScope构造函数中有$root属性指向当前作用域（$rootScope）\nScope.prototype.$apply=function(expr){\n    try {\n            return this.$eval(expr);\n        } finally {\n            this.$root.$digest();\n        }\n}  \n ```\n\n独立作用域\n\n> isolated scope 不会继承任何属性从父类scope,\n\n### 作用域事件\n\n![](/css/images/angular-img/pub-sub.png)\n\n\n\n\n\n","source":"_posts/angular-bootstrap和scope解析.md","raw":"---\ntitle: angular bootstrap和scope解析\ndate: 2017-05-24 18:16:51\ntags: angular\n---\n\n\n- ## angular启动过程\n\n- ## scope\n\n---\n\n## angular启动过程\n\n1. ### 定义\n\n> angular.module提供创建组件的方法，是一系列任务的集合。每个模块内部维护_invokeQueue数组\n\n    ```javascript\n        angular.module('app',[])\n        moduleInstance={\n            name:,\n            requires:,\n            constant:,\n            provider:,\n            factory:,\n            value:,\n            service:,\n            filter:$filterProvider服务的方法,\n            directive:$compileProvider服务的方法,\n            controller:$controllerProvider服务的方法,\n            component:$compileProvider服务的方法,\n            config:,\n            run: \n        }\n\n    ```\n\n内置的ng模块 包含angular框架的核心服务($compile,$rootScope等)\n\n2. ### 注册\n\n> createInjector() 遍历模块及其依赖，执行_invokeQueue中定义的各种组件\n\n```javascript\n    angular.bootstap=function(ele,modules){\n        modules=modules||[]\n        modules.unshift('ng')\n        createInjector(modules)\n    } \n\n```\n![](/css/images/angular-img/di.png)\n\n3. ### compile DOM, DOM linked to scope\n\n$compile\n\n```javascript\n    var injector=createInjector(modules);\n    injector.invoke([$compile,$rootScope,function($compile,$rootScope){\n        $compile($element)($rootScope);\n    }]);\n```\n\n> This also means that at this point the initial scope hierarchy of the application is constructed.  Any directives that use inherited or isolate scopes will cause new scopes to be created and linked. All of that is handled by the compiler.   \n\n![](/css/images/angular-img/directive-execute-order.png)\n\n![](/css/images/angular-img/compile.png)\n\n4. ### 初始运行一次脏检测。\n\n```javascript\n    var injector=createInjector(modules);\n    injector.invoke([$compile,$rootScope,function($compile,$rootScope){\n        $rootScope.$apply(function(){\n             $compile($element)($rootScope);\n        })\n    }]); \n```\n\n## scope\n\n渲染数据到模板的上下文，model需要挂载在scope上。\n\nview和controller之间的桥梁\n\ncontroller: 初始化$scope,为$scope添加行为\n\n![](/css/images/angular-img/MVVM.png)\n\n\n\nscope做的事：\n\n-  模型和视图的桥梁 数据绑定 脏检测\n-  scope层级关系，作用域继承\n-  广播、监听事件\n\n\n\n### dirty-checking\n\n\n ```javascript\n\n    .controller($scope){\n        $scope.user.name=''\n        $scope.$watch('user.name',function(){ \n        })\n    }\n\n ```\n\n> 内部维护$$watchers数组 存放  $watch(watchFN,listenFN) \n\n  ```javascript\n\n    $$watchers.push({\n        watchFn:watchf,\n        listenerFn:listenf\n    })\n\n  ```   \n\n> $digest 迭代$$watchers数组,对每一条watcher,比较监听的变量前后两次值是否相同，不同则执行监听函数。\n\n  ```javascript\n\n    Scope.prototype.$digest = function() {\n        var self = this;\n        var newValue, oldValue;\n        _.forEach(this.$$watchers, function(watcher) {\n            newValue = watcher.watchFn(self);\n            oldValue = watcher.last;\n            if (newValue !== oldValue) {\n                watcher.last = newValue;\n                watcher.listenerFn(newValue, oldValue, self);\n            }\n        });\n    };\n\n  ``` \n> 只要有变化，脏检测就会一直循环执行，直到所有监听的值都不在改变。\n\n  ```javascript\n\n        Scope.prototype.$$digestOnce = function() {\n            var self = this;\n             var newValue, oldValue, dirty;\n            _.forEach(this.$$watchers, function(watcher) {\n                newValue = watcher.watchFn(self);\n                oldValue = watcher.last;\n                if (newValue !== oldValue) {\n                    watcher.last = newValue;\n                    watcher.listenerFn(newValue,\n                    (oldValue === initWatchVal ? newValue : oldValue), self);\n                    dirty = true;\n                 }\n            });\n                                                                                                        return dirty;\n        };\n\n        Scope.prototype.$digest = function() {\n            var dirty;\n            do {\n                dirty = this.$$digestOnce();\n            } while (dirty);\n        };\n\n  ```\n\n$evel   以当前scope作为上下文执行\n\n  ```javascript\n\n        Scope.prototype.$eval = function(expr, locals) {\n            return expr(this, locals);\n        };\n\n  ```\n\n  $apply \n  ```\n    Scope.prototype.$apply = function(expr) {\n        try {\n            return this.$eval(expr);\n        } finally {\n            this.$digest();\n        }\n    };\n  ```\n\n### 作用域继承\n\n$rootScope.$new()\n\n```javascript\n\n    Scope.prototype.$new = function() {\n        var ChildScope = function() { };\n        ChildScope.prototype = this;\n        var child = new ChildScope();\n        this.$$children.push(child);\n        child.$$watchers = [];\n        child.$$children = [];\n        return child;\n    };\n\n```\n\n> ngController创建新的作用域，每一个controller构造函数执行的时候都会传入一个新创建的子作用域\n\n>$digest() 只有当前scope及其子scope的$$watchers执行\n\n```javascript\n\n   Scope.prototype.$$everyScope = function(fn) {\n        if (fn(this)) {\n            return this.$$children.every(function(child) {\n            return child.$$everyScope(fn);\n        });\n        } else {\n            return false;\n        }\n    };\n```\n\n> $apply  goes directly to the root and digests the whole scope hierarchy\n  \n```javascript\n\nScope构造函数中有$root属性指向当前作用域（$rootScope）\nScope.prototype.$apply=function(expr){\n    try {\n            return this.$eval(expr);\n        } finally {\n            this.$root.$digest();\n        }\n}  \n ```\n\n独立作用域\n\n> isolated scope 不会继承任何属性从父类scope,\n\n### 作用域事件\n\n![](/css/images/angular-img/pub-sub.png)\n\n\n\n\n\n","slug":"angular-bootstrap和scope解析","published":1,"updated":"2017-05-24T10:36:19.000Z","_id":"cj32upm07000209rtkbsz59he","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h2 id=\"angular启动过程\"><a href=\"#angular启动过程\" class=\"headerlink\" title=\"angular启动过程\"></a>angular启动过程</h2></li>\n<li><h2 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h2></li>\n</ul>\n<hr>\n<h2 id=\"angular启动过程-1\"><a href=\"#angular启动过程-1\" class=\"headerlink\" title=\"angular启动过程\"></a>angular启动过程</h2><ol>\n<li><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3></li>\n</ol>\n<blockquote>\n<p>angular.module提供创建组件的方法，是一系列任务的集合。每个模块内部维护_invokeQueue数组</p>\n</blockquote>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'app'</span>,[])</div><div class=\"line\">moduleInstance=&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>:,</div><div class=\"line\">    <span class=\"attr\">requires</span>:,</div><div class=\"line\">    <span class=\"attr\">constant</span>:,</div><div class=\"line\">    <span class=\"attr\">provider</span>:,</div><div class=\"line\">    <span class=\"attr\">factory</span>:,</div><div class=\"line\">    <span class=\"attr\">value</span>:,</div><div class=\"line\">    <span class=\"attr\">service</span>:,</div><div class=\"line\">    <span class=\"attr\">filter</span>:$filterProvider服务的方法,</div><div class=\"line\">    <span class=\"attr\">directive</span>:$compileProvider服务的方法,</div><div class=\"line\">    <span class=\"attr\">controller</span>:$controllerProvider服务的方法,</div><div class=\"line\">    <span class=\"attr\">component</span>:$compileProvider服务的方法,</div><div class=\"line\">    <span class=\"attr\">config</span>:,</div><div class=\"line\">    <span class=\"attr\">run</span>: </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><p>内置的ng模块 包含angular框架的核心服务($compile,$rootScope等)</p>\n<ol>\n<li><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3></li>\n</ol>\n<blockquote>\n<p>createInjector() 遍历模块及其依赖，执行_invokeQueue中定义的各种组件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.bootstap=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,modules</span>)</span>&#123;</div><div class=\"line\">    modules=modules||[]</div><div class=\"line\">    modules.unshift(<span class=\"string\">'ng'</span>)</div><div class=\"line\">    createInjector(modules)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/css/images/angular-img/di.png\" alt=\"\"></p>\n<ol>\n<li><h3 id=\"compile-DOM-DOM-linked-to-scope\"><a href=\"#compile-DOM-DOM-linked-to-scope\" class=\"headerlink\" title=\"compile DOM, DOM linked to scope\"></a>compile DOM, DOM linked to scope</h3></li>\n</ol>\n<p>$compile</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector=createInjector(modules);</div><div class=\"line\">injector.invoke([$compile,$rootScope,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$compile,$rootScope</span>)</span>&#123;</div><div class=\"line\">    $compile($element)($rootScope);</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>This also means that at this point the initial scope hierarchy of the application is constructed.  Any directives that use inherited or isolate scopes will cause new scopes to be created and linked. All of that is handled by the compiler.   </p>\n</blockquote>\n<p><img src=\"/css/images/angular-img/directive-execute-order.png\" alt=\"\"></p>\n<p><img src=\"/css/images/angular-img/compile.png\" alt=\"\"></p>\n<ol>\n<li><h3 id=\"初始运行一次脏检测。\"><a href=\"#初始运行一次脏检测。\" class=\"headerlink\" title=\"初始运行一次脏检测。\"></a>初始运行一次脏检测。</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector=createInjector(modules);</div><div class=\"line\">injector.invoke([$compile,$rootScope,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$compile,$rootScope</span>)</span>&#123;</div><div class=\"line\">    $rootScope.$apply(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">         $compile($element)($rootScope);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h2 id=\"scope-1\"><a href=\"#scope-1\" class=\"headerlink\" title=\"scope\"></a>scope</h2><p>渲染数据到模板的上下文，model需要挂载在scope上。</p>\n<p>view和controller之间的桥梁</p>\n<p>controller: 初始化$scope,为$scope添加行为</p>\n<p><img src=\"/css/images/angular-img/MVVM.png\" alt=\"\"></p>\n<p>scope做的事：</p>\n<ul>\n<li>模型和视图的桥梁 数据绑定 脏检测</li>\n<li>scope层级关系，作用域继承</li>\n<li>广播、监听事件</li>\n</ul>\n<h3 id=\"dirty-checking\"><a href=\"#dirty-checking\" class=\"headerlink\" title=\"dirty-checking\"></a>dirty-checking</h3> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.controller($scope)&#123;</div><div class=\"line\">    $scope.user.name=<span class=\"string\">''</span></div><div class=\"line\">    $scope.$watch(<span class=\"string\">'user.name'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>内部维护$$watchers数组 存放  $watch(watchFN,listenFN) </p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">    $$watchers.push(&#123;</div><div class=\"line\">        <span class=\"attr\">watchFn</span>:watchf,</div><div class=\"line\">        <span class=\"attr\">listenerFn</span>:listenf</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"string\">``</span><span class=\"string\">`   </span></div><div class=\"line\"></div><div class=\"line\">&gt; $digest 迭代$$watchers数组,对每一条watcher,比较监听的变量前后两次值是否相同，不同则执行监听函数。</div><div class=\"line\"></div><div class=\"line\">  `<span class=\"string\">``</span>javascript</div><div class=\"line\"></div><div class=\"line\">    Scope.prototype.$digest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> newValue, oldValue;</div><div class=\"line\">        _.forEach(<span class=\"keyword\">this</span>.$$watchers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">watcher</span>) </span>&#123;</div><div class=\"line\">            newValue = watcher.watchFn(self);</div><div class=\"line\">            oldValue = watcher.last;</div><div class=\"line\">            <span class=\"keyword\">if</span> (newValue !== oldValue) &#123;</div><div class=\"line\">                watcher.last = newValue;</div><div class=\"line\">                watcher.listenerFn(newValue, oldValue, self);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\">&gt; 只要有变化，脏检测就会一直循环执行，直到所有监听的值都不在改变。</div><div class=\"line\"></div><div class=\"line\">  `<span class=\"string\">``</span>javascript</div><div class=\"line\"></div><div class=\"line\">        Scope.prototype.$$digestOnce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">             <span class=\"keyword\">var</span> newValue, oldValue, dirty;</div><div class=\"line\">            _.forEach(<span class=\"keyword\">this</span>.$$watchers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">watcher</span>) </span>&#123;</div><div class=\"line\">                newValue = watcher.watchFn(self);</div><div class=\"line\">                oldValue = watcher.last;</div><div class=\"line\">                <span class=\"keyword\">if</span> (newValue !== oldValue) &#123;</div><div class=\"line\">                    watcher.last = newValue;</div><div class=\"line\">                    watcher.listenerFn(newValue,</div><div class=\"line\">                    (oldValue === initWatchVal ? newValue : oldValue), self);</div><div class=\"line\">                    dirty = <span class=\"literal\">true</span>;</div><div class=\"line\">                 &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">                                                                                                        <span class=\"keyword\">return</span> dirty;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        Scope.prototype.$digest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> dirty;</div><div class=\"line\">            <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                dirty = <span class=\"keyword\">this</span>.$$digestOnce();</div><div class=\"line\">            &#125; <span class=\"keyword\">while</span> (dirty);</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n<p>$evel   以当前scope作为上下文执行</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Scope.prototype.$<span class=\"built_in\">eval</span> = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">expr, locals</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> expr(<span class=\"keyword\">this</span>, locals);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>  $apply<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scope.prototype.$apply = function(expr) &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        return this.$eval(expr);</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        this.$digest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"作用域继承\"><a href=\"#作用域继承\" class=\"headerlink\" title=\"作用域继承\"></a>作用域继承</h3><p>$rootScope.$new()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Scope.prototype.$<span class=\"keyword\">new</span> = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ChildScope = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</div><div class=\"line\">    ChildScope.prototype = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> ChildScope();</div><div class=\"line\">    <span class=\"keyword\">this</span>.$$children.push(child);</div><div class=\"line\">    child.$$watchers = [];</div><div class=\"line\">    child.$$children = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ngController创建新的作用域，每一个controller构造函数执行的时候都会传入一个新创建的子作用域</p>\n<p>$digest() 只有当前scope及其子scope的$$watchers执行</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Scope.prototype.$$everyScope = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (fn(<span class=\"keyword\">this</span>)) &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$$children.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> child.$$everyScope(fn);</div><div class=\"line\">     &#125;);</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$apply  goes directly to the root and digests the whole scope hierarchy</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Scope构造函数中有$root属性指向当前作用域（$rootScope）</div><div class=\"line\">Scope.prototype.$apply=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">expr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$<span class=\"built_in\">eval</span>(expr);</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$root.$digest();</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>独立作用域</p>\n<blockquote>\n<p>isolated scope 不会继承任何属性从父类scope,</p>\n</blockquote>\n<h3 id=\"作用域事件\"><a href=\"#作用域事件\" class=\"headerlink\" title=\"作用域事件\"></a>作用域事件</h3><p><img src=\"/css/images/angular-img/pub-sub.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h2 id=\"angular启动过程\"><a href=\"#angular启动过程\" class=\"headerlink\" title=\"angular启动过程\"></a>angular启动过程</h2></li>\n<li><h2 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h2></li>\n</ul>\n<hr>\n<h2 id=\"angular启动过程-1\"><a href=\"#angular启动过程-1\" class=\"headerlink\" title=\"angular启动过程\"></a>angular启动过程</h2><ol>\n<li><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3></li>\n</ol>\n<blockquote>\n<p>angular.module提供创建组件的方法，是一系列任务的集合。每个模块内部维护_invokeQueue数组</p>\n</blockquote>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'app'</span>,[])</div><div class=\"line\">moduleInstance=&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>:,</div><div class=\"line\">    <span class=\"attr\">requires</span>:,</div><div class=\"line\">    <span class=\"attr\">constant</span>:,</div><div class=\"line\">    <span class=\"attr\">provider</span>:,</div><div class=\"line\">    <span class=\"attr\">factory</span>:,</div><div class=\"line\">    <span class=\"attr\">value</span>:,</div><div class=\"line\">    <span class=\"attr\">service</span>:,</div><div class=\"line\">    <span class=\"attr\">filter</span>:$filterProvider服务的方法,</div><div class=\"line\">    <span class=\"attr\">directive</span>:$compileProvider服务的方法,</div><div class=\"line\">    <span class=\"attr\">controller</span>:$controllerProvider服务的方法,</div><div class=\"line\">    <span class=\"attr\">component</span>:$compileProvider服务的方法,</div><div class=\"line\">    <span class=\"attr\">config</span>:,</div><div class=\"line\">    <span class=\"attr\">run</span>: </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><p>内置的ng模块 包含angular框架的核心服务($compile,$rootScope等)</p>\n<ol>\n<li><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3></li>\n</ol>\n<blockquote>\n<p>createInjector() 遍历模块及其依赖，执行_invokeQueue中定义的各种组件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.bootstap=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,modules</span>)</span>&#123;</div><div class=\"line\">    modules=modules||[]</div><div class=\"line\">    modules.unshift(<span class=\"string\">'ng'</span>)</div><div class=\"line\">    createInjector(modules)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/css/images/angular-img/di.png\" alt=\"\"></p>\n<ol>\n<li><h3 id=\"compile-DOM-DOM-linked-to-scope\"><a href=\"#compile-DOM-DOM-linked-to-scope\" class=\"headerlink\" title=\"compile DOM, DOM linked to scope\"></a>compile DOM, DOM linked to scope</h3></li>\n</ol>\n<p>$compile</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector=createInjector(modules);</div><div class=\"line\">injector.invoke([$compile,$rootScope,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$compile,$rootScope</span>)</span>&#123;</div><div class=\"line\">    $compile($element)($rootScope);</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>This also means that at this point the initial scope hierarchy of the application is constructed.  Any directives that use inherited or isolate scopes will cause new scopes to be created and linked. All of that is handled by the compiler.   </p>\n</blockquote>\n<p><img src=\"/css/images/angular-img/directive-execute-order.png\" alt=\"\"></p>\n<p><img src=\"/css/images/angular-img/compile.png\" alt=\"\"></p>\n<ol>\n<li><h3 id=\"初始运行一次脏检测。\"><a href=\"#初始运行一次脏检测。\" class=\"headerlink\" title=\"初始运行一次脏检测。\"></a>初始运行一次脏检测。</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector=createInjector(modules);</div><div class=\"line\">injector.invoke([$compile,$rootScope,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$compile,$rootScope</span>)</span>&#123;</div><div class=\"line\">    $rootScope.$apply(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">         $compile($element)($rootScope);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h2 id=\"scope-1\"><a href=\"#scope-1\" class=\"headerlink\" title=\"scope\"></a>scope</h2><p>渲染数据到模板的上下文，model需要挂载在scope上。</p>\n<p>view和controller之间的桥梁</p>\n<p>controller: 初始化$scope,为$scope添加行为</p>\n<p><img src=\"/css/images/angular-img/MVVM.png\" alt=\"\"></p>\n<p>scope做的事：</p>\n<ul>\n<li>模型和视图的桥梁 数据绑定 脏检测</li>\n<li>scope层级关系，作用域继承</li>\n<li>广播、监听事件</li>\n</ul>\n<h3 id=\"dirty-checking\"><a href=\"#dirty-checking\" class=\"headerlink\" title=\"dirty-checking\"></a>dirty-checking</h3> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.controller($scope)&#123;</div><div class=\"line\">    $scope.user.name=<span class=\"string\">''</span></div><div class=\"line\">    $scope.$watch(<span class=\"string\">'user.name'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>内部维护$$watchers数组 存放  $watch(watchFN,listenFN) </p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">    $$watchers.push(&#123;</div><div class=\"line\">        <span class=\"attr\">watchFn</span>:watchf,</div><div class=\"line\">        <span class=\"attr\">listenerFn</span>:listenf</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"string\">``</span><span class=\"string\">`   </div><div class=\"line\"></div><div class=\"line\">&gt; $digest 迭代$$watchers数组,对每一条watcher,比较监听的变量前后两次值是否相同，不同则执行监听函数。</div><div class=\"line\"></div><div class=\"line\">  `</span><span class=\"string\">``</span>javascript</div><div class=\"line\"></div><div class=\"line\">    Scope.prototype.$digest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> newValue, oldValue;</div><div class=\"line\">        _.forEach(<span class=\"keyword\">this</span>.$$watchers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">watcher</span>) </span>&#123;</div><div class=\"line\">            newValue = watcher.watchFn(self);</div><div class=\"line\">            oldValue = watcher.last;</div><div class=\"line\">            <span class=\"keyword\">if</span> (newValue !== oldValue) &#123;</div><div class=\"line\">                watcher.last = newValue;</div><div class=\"line\">                watcher.listenerFn(newValue, oldValue, self);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"string\">``</span><span class=\"string\">` </div><div class=\"line\">&gt; 只要有变化，脏检测就会一直循环执行，直到所有监听的值都不在改变。</div><div class=\"line\"></div><div class=\"line\">  `</span><span class=\"string\">``</span>javascript</div><div class=\"line\"></div><div class=\"line\">        Scope.prototype.$$digestOnce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">             <span class=\"keyword\">var</span> newValue, oldValue, dirty;</div><div class=\"line\">            _.forEach(<span class=\"keyword\">this</span>.$$watchers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">watcher</span>) </span>&#123;</div><div class=\"line\">                newValue = watcher.watchFn(self);</div><div class=\"line\">                oldValue = watcher.last;</div><div class=\"line\">                <span class=\"keyword\">if</span> (newValue !== oldValue) &#123;</div><div class=\"line\">                    watcher.last = newValue;</div><div class=\"line\">                    watcher.listenerFn(newValue,</div><div class=\"line\">                    (oldValue === initWatchVal ? newValue : oldValue), self);</div><div class=\"line\">                    dirty = <span class=\"literal\">true</span>;</div><div class=\"line\">                 &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">                                                                                                        <span class=\"keyword\">return</span> dirty;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        Scope.prototype.$digest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> dirty;</div><div class=\"line\">            <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                dirty = <span class=\"keyword\">this</span>.$$digestOnce();</div><div class=\"line\">            &#125; <span class=\"keyword\">while</span> (dirty);</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n<p>$evel   以当前scope作为上下文执行</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Scope.prototype.$<span class=\"built_in\">eval</span> = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">expr, locals</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> expr(<span class=\"keyword\">this</span>, locals);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>  $apply<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scope.prototype.$apply = function(expr) &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        return this.$eval(expr);</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        this.$digest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"作用域继承\"><a href=\"#作用域继承\" class=\"headerlink\" title=\"作用域继承\"></a>作用域继承</h3><p>$rootScope.$new()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Scope.prototype.$<span class=\"keyword\">new</span> = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ChildScope = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</div><div class=\"line\">    ChildScope.prototype = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> ChildScope();</div><div class=\"line\">    <span class=\"keyword\">this</span>.$$children.push(child);</div><div class=\"line\">    child.$$watchers = [];</div><div class=\"line\">    child.$$children = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ngController创建新的作用域，每一个controller构造函数执行的时候都会传入一个新创建的子作用域</p>\n<p>$digest() 只有当前scope及其子scope的$$watchers执行</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Scope.prototype.$$everyScope = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (fn(<span class=\"keyword\">this</span>)) &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$$children.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> child.$$everyScope(fn);</div><div class=\"line\">     &#125;);</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>$apply  goes directly to the root and digests the whole scope hierarchy</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Scope构造函数中有$root属性指向当前作用域（$rootScope）</div><div class=\"line\">Scope.prototype.$apply=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">expr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$<span class=\"built_in\">eval</span>(expr);</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$root.$digest();</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>独立作用域</p>\n<blockquote>\n<p>isolated scope 不会继承任何属性从父类scope,</p>\n</blockquote>\n<h3 id=\"作用域事件\"><a href=\"#作用域事件\" class=\"headerlink\" title=\"作用域事件\"></a>作用域事件</h3><p><img src=\"/css/images/angular-img/pub-sub.png\" alt=\"\"></p>\n"},{"title":"angular-directive","date":"2016-10-06T10:16:02.000Z","_content":"\n- [指令介绍](#instruct)\n- [使用介绍](#params)\n\t- [scope](#scope)\n\t- [controller](#controller)\n\t- [required](#required)\n\t- [transclude](#transclude)\n- [最佳实践](#best)\n\n---\n\n<h3 id='instruct'>指令介绍</h3>\n 指令是angular中十分重要的概念,能让我们创建自定义元素,不仅是元素,还可以是（属性,注释,css class）,一般也就是自定义元素或属性。\n 创建方法 angular.module().directive()。1.5以上版本提供了directive()的语法糖component(),只用来创建组件。\n\n---\n\n```js    \n    angular中各部分执行顺序\n    | config块\n    | run块   \n    | 指令 comile阶段\n    | controller 按着父子DOM结构从外到内\n    | 指令 controller阶段\n    |     包括$onInit $onChanges $doCheck $onDestroy $postLink生命周期钩子\n    |      construtor --> $onChanges --> $onInit --> (若binding数据更新,onChanges还被执行) --> $postLink \n    | 指令link pre阶段 从父指令到子指令\n    | 指令link post阶段 从子指令到父指令  \n```\n\n<h3 id='params'>使用介绍</h3>\n\n- <h5 id='scope'>scope</h5>\n    - scope:false\n      不创建自己的scope，直接继承父类scope\n    - scope:true\n       创建自己的作用域，但会继承父scope \n    - scope:{}\n       独立的作用域\n       \n- <h5 id='compile'>compile</h5>\n\n      处理一些不需要作用域的操作，DOM处理等，返回link函数。\n      注意，对当前使用的模板中的指令只会编译一遍，所以此阶段常用来做一些优化\n        \n- <h5 id='link'>link</h5>\n\n      link:function(scope,element,attr,transclude)\n      可以访问scope,用来注册事件处理函数等 \n      注意，处在循环中的指令，链接函数在每次循环中都运行\n\n- <h5 id='controller'>controller 生命周期钩子</h5>\n\n    *controller被实例化在pre-linking阶段之前,并且能够被其他指令访问*\n    controller中提供了一些钩子函数，在directive的生命周期的特定阶段被调用\n   \n    - $onInit\n        在DOM元素上的所有controller初始化完成之后,会在每个controller上被调用.在这个阶段,bindings中的数据初始化\n        (注意,初始化但可能为空，等待异步操作完成后的填充，可以理解为$onInit是bindings中数据的constructor)\n        顾名思义，这个阶段就是做一些初始化操作,$onInit在pre,post link函数之前执行\n        $onInit和require \n           require的父组件中定义的方法可以在$onInit中使用\n    - $onChanges(changesObj)\n         在 < @绑定的数据更新时被调用,changesObjs是一个对象，键是所绑定的属性的名，值为\n         ```\n         {\n                     currentValue,\n                     previousValue, \n                     isFirstChange()\n         }\n          ```\n         形式的对象。\n         onChanges钩子的一个十分重要的作用是clone bindings中的数据，来打断与外层组件的数据共享(因为 虽然 < 是单向绑定,但传递的是引用,在组件内部对传递进来的数据做修改，\n         是会污染外层数据的)\n         ```\n           {\n             bindings:{\n              nList:'<'\n             },\n             controller:function(){\n             \n                this.$onChanges=function(changes){\n                    if(changes.nList){\n                      this.inNList=angular.copy(this.nList)\n                    }\n                }\n                \n             }\n           }\n         ```\n    - $onDestroy\n        组件的作用域被销毁的时候被调用,在这个方法中我们可以释放多余的资源,监听器和相关时间处理函数\n        onDestory方法的触发是自上而下的，意味着父组件先执行，子组件后执行\n        \n    - $postLink\n        在当前元素及其下元素都被link之后调用，这个方法可以被用来添加DOM事件处理函数和直接的DOM操作。\n        需要注意的时，子元素中包含templateUrl的指令在此时还没有被编译和链接,要等到template异步加载完之后才触发这两个阶段。\n\n- <h5 id='required'>required</h5>\n\n    用来require其他的指令或component,注入他们的controller,  \n    对directive方法来说,是注入到link方法中，作为第四个参数\n    对component方法来说,是通过controller的this来访问\n   \n   ```\n    require://可以是string,array,object,\n                //如果是object,形式为\n                 {\n                    parentDir:'?XX | ^XX | ^^XX | ?^ | ?^^'\n                 }\n        \n                directive('childDir',function(){                            \n                     return {\n                           require:'^parentDir', //require父指令contorller中定义的方法\n                           require:'wrapCtrl', //require外层中的controller\n                           link:function(scope,elemnt,attr,parentDir){\n                              parentDir.XXXX()\n                           }\n                    }   \n                })\n                \n                component('childComp',{\n                \n                    require:'^parentComp',\n                    controller:function(){\n                       this.$onInit=function(){\n                         this.parentComp.XXXX() //调用父组件中的方法，注意是在onInit方法中使用的，\n                                                //因为此时当前DOM及外层的controller都初始化完毕\n                       }\n                    }\n                })  \n   ```\n- <h5 id='transclude'>transclude</h5>\n\n  transclude用来提取一部分dom元素并把他们copy到其他地方，值得注意的是，这部分dom元素连接的scope还是原来地方的作用域。\n主要用在把指令中包裹的DOM内容插入到指令的template中的指定位置。好处就是这部分dom还保持着原来的scope,\n\n \n<h3 id='test'>最佳实践</h3>\n\n上面介绍了声明指令用到的一些常用属性，但directive方法应该不再用来自定义元素。\ndirective只用来定义属性。组件用component来定义\n\nHere are some advisories for using Directives:\n\nNever use templates, scope, bindToController or controllers\nAlways restrict: 'A' with Directives\nUse compile and link where necessary\nRemember to destroy and unbind event handlers inside $scope.$on('$destroy', fn);\nonly use transclude: true when you want to create a directive that wraps arbitrary content.\nuse controller when you want to expose an API to other directives. Otherwise use link.\n\n使用component方法定义组件的注意点：\n\n 不再使用=传递数据\n 单向数据流和事件\n bindings数据在onChanges中复制一份\n \n  ```\n    ES6写法\n     .component('com',{\n        template:'',\n        binding:{\n          list:'<',\n          nCallback:'&'\n        }\n        controller: classChildCtrl(){\n            \n            $onInit(){\n                    \n            }\n            \n            $onChanges(){\n                this.myList=angular.copy(this.list)\n            }\n            \n            doSomething(){\n                this.nCallback({\n                    $event:{\n                        data:someData\n                    }\n                })\n            }\n            \n        }\n     })\n     \n     <comp list='$ctrl.list' n-callback='$ctrl.somefn($event)'></comp>\n     \n  ```","source":"_posts/angular-directive.md","raw":"---\ntitle: angular-directive\ndate: 2016-10-06 18:16:02\ntags: angular\n---\n\n- [指令介绍](#instruct)\n- [使用介绍](#params)\n\t- [scope](#scope)\n\t- [controller](#controller)\n\t- [required](#required)\n\t- [transclude](#transclude)\n- [最佳实践](#best)\n\n---\n\n<h3 id='instruct'>指令介绍</h3>\n 指令是angular中十分重要的概念,能让我们创建自定义元素,不仅是元素,还可以是（属性,注释,css class）,一般也就是自定义元素或属性。\n 创建方法 angular.module().directive()。1.5以上版本提供了directive()的语法糖component(),只用来创建组件。\n\n---\n\n```js    \n    angular中各部分执行顺序\n    | config块\n    | run块   \n    | 指令 comile阶段\n    | controller 按着父子DOM结构从外到内\n    | 指令 controller阶段\n    |     包括$onInit $onChanges $doCheck $onDestroy $postLink生命周期钩子\n    |      construtor --> $onChanges --> $onInit --> (若binding数据更新,onChanges还被执行) --> $postLink \n    | 指令link pre阶段 从父指令到子指令\n    | 指令link post阶段 从子指令到父指令  \n```\n\n<h3 id='params'>使用介绍</h3>\n\n- <h5 id='scope'>scope</h5>\n    - scope:false\n      不创建自己的scope，直接继承父类scope\n    - scope:true\n       创建自己的作用域，但会继承父scope \n    - scope:{}\n       独立的作用域\n       \n- <h5 id='compile'>compile</h5>\n\n      处理一些不需要作用域的操作，DOM处理等，返回link函数。\n      注意，对当前使用的模板中的指令只会编译一遍，所以此阶段常用来做一些优化\n        \n- <h5 id='link'>link</h5>\n\n      link:function(scope,element,attr,transclude)\n      可以访问scope,用来注册事件处理函数等 \n      注意，处在循环中的指令，链接函数在每次循环中都运行\n\n- <h5 id='controller'>controller 生命周期钩子</h5>\n\n    *controller被实例化在pre-linking阶段之前,并且能够被其他指令访问*\n    controller中提供了一些钩子函数，在directive的生命周期的特定阶段被调用\n   \n    - $onInit\n        在DOM元素上的所有controller初始化完成之后,会在每个controller上被调用.在这个阶段,bindings中的数据初始化\n        (注意,初始化但可能为空，等待异步操作完成后的填充，可以理解为$onInit是bindings中数据的constructor)\n        顾名思义，这个阶段就是做一些初始化操作,$onInit在pre,post link函数之前执行\n        $onInit和require \n           require的父组件中定义的方法可以在$onInit中使用\n    - $onChanges(changesObj)\n         在 < @绑定的数据更新时被调用,changesObjs是一个对象，键是所绑定的属性的名，值为\n         ```\n         {\n                     currentValue,\n                     previousValue, \n                     isFirstChange()\n         }\n          ```\n         形式的对象。\n         onChanges钩子的一个十分重要的作用是clone bindings中的数据，来打断与外层组件的数据共享(因为 虽然 < 是单向绑定,但传递的是引用,在组件内部对传递进来的数据做修改，\n         是会污染外层数据的)\n         ```\n           {\n             bindings:{\n              nList:'<'\n             },\n             controller:function(){\n             \n                this.$onChanges=function(changes){\n                    if(changes.nList){\n                      this.inNList=angular.copy(this.nList)\n                    }\n                }\n                \n             }\n           }\n         ```\n    - $onDestroy\n        组件的作用域被销毁的时候被调用,在这个方法中我们可以释放多余的资源,监听器和相关时间处理函数\n        onDestory方法的触发是自上而下的，意味着父组件先执行，子组件后执行\n        \n    - $postLink\n        在当前元素及其下元素都被link之后调用，这个方法可以被用来添加DOM事件处理函数和直接的DOM操作。\n        需要注意的时，子元素中包含templateUrl的指令在此时还没有被编译和链接,要等到template异步加载完之后才触发这两个阶段。\n\n- <h5 id='required'>required</h5>\n\n    用来require其他的指令或component,注入他们的controller,  \n    对directive方法来说,是注入到link方法中，作为第四个参数\n    对component方法来说,是通过controller的this来访问\n   \n   ```\n    require://可以是string,array,object,\n                //如果是object,形式为\n                 {\n                    parentDir:'?XX | ^XX | ^^XX | ?^ | ?^^'\n                 }\n        \n                directive('childDir',function(){                            \n                     return {\n                           require:'^parentDir', //require父指令contorller中定义的方法\n                           require:'wrapCtrl', //require外层中的controller\n                           link:function(scope,elemnt,attr,parentDir){\n                              parentDir.XXXX()\n                           }\n                    }   \n                })\n                \n                component('childComp',{\n                \n                    require:'^parentComp',\n                    controller:function(){\n                       this.$onInit=function(){\n                         this.parentComp.XXXX() //调用父组件中的方法，注意是在onInit方法中使用的，\n                                                //因为此时当前DOM及外层的controller都初始化完毕\n                       }\n                    }\n                })  \n   ```\n- <h5 id='transclude'>transclude</h5>\n\n  transclude用来提取一部分dom元素并把他们copy到其他地方，值得注意的是，这部分dom元素连接的scope还是原来地方的作用域。\n主要用在把指令中包裹的DOM内容插入到指令的template中的指定位置。好处就是这部分dom还保持着原来的scope,\n\n \n<h3 id='test'>最佳实践</h3>\n\n上面介绍了声明指令用到的一些常用属性，但directive方法应该不再用来自定义元素。\ndirective只用来定义属性。组件用component来定义\n\nHere are some advisories for using Directives:\n\nNever use templates, scope, bindToController or controllers\nAlways restrict: 'A' with Directives\nUse compile and link where necessary\nRemember to destroy and unbind event handlers inside $scope.$on('$destroy', fn);\nonly use transclude: true when you want to create a directive that wraps arbitrary content.\nuse controller when you want to expose an API to other directives. Otherwise use link.\n\n使用component方法定义组件的注意点：\n\n 不再使用=传递数据\n 单向数据流和事件\n bindings数据在onChanges中复制一份\n \n  ```\n    ES6写法\n     .component('com',{\n        template:'',\n        binding:{\n          list:'<',\n          nCallback:'&'\n        }\n        controller: classChildCtrl(){\n            \n            $onInit(){\n                    \n            }\n            \n            $onChanges(){\n                this.myList=angular.copy(this.list)\n            }\n            \n            doSomething(){\n                this.nCallback({\n                    $event:{\n                        data:someData\n                    }\n                })\n            }\n            \n        }\n     })\n     \n     <comp list='$ctrl.list' n-callback='$ctrl.somefn($event)'></comp>\n     \n  ```","slug":"angular-directive","published":1,"updated":"2017-05-24T10:36:41.966Z","_id":"cj32upm0j000509rtoyo1cun0","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><a href=\"#instruct\">指令介绍</a></li>\n<li><a href=\"#params\">使用介绍</a><ul>\n<li><a href=\"#scope\">scope</a></li>\n<li><a href=\"#controller\">controller</a></li>\n<li><a href=\"#required\">required</a></li>\n<li><a href=\"#transclude\">transclude</a></li>\n</ul>\n</li>\n<li><a href=\"#best\">最佳实践</a></li>\n</ul>\n<hr>\n<h3 id=\"instruct\">指令介绍</h3><br> 指令是angular中十分重要的概念,能让我们创建自定义元素,不仅是元素,还可以是（属性,注释,css class）,一般也就是自定义元素或属性。<br> 创建方法 angular.module().directive()。1.5以上版本提供了directive()的语法糖component(),只用来创建组件。<br><br>—<br><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular中各部分执行顺序</div><div class=\"line\">| config块</div><div class=\"line\">| run块   </div><div class=\"line\">| 指令 comile阶段</div><div class=\"line\">| controller 按着父子DOM结构从外到内</div><div class=\"line\">| 指令 controller阶段</div><div class=\"line\">|     包括$onInit $onChanges $doCheck $onDestroy $postLink生命周期钩子</div><div class=\"line\">|      construtor --&gt; $onChanges --&gt; $onInit --&gt; (若binding数据更新,onChanges还被执行) --&gt; $postLink </div><div class=\"line\">| 指令link pre阶段 从父指令到子指令</div><div class=\"line\">| 指令link post阶段 从子指令到父指令</div></pre></td></tr></table></figure><br><br><h3 id=\"params\">使用介绍</h3>\n\n<ul>\n<li><p></p><h5 id=\"scope\">scope</h5><p></p>\n<ul>\n<li>scope:false<br>不创建自己的scope，直接继承父类scope</li>\n<li>scope:true<br> 创建自己的作用域，但会继承父scope </li>\n<li>scope:{}<br> 独立的作用域</li>\n</ul>\n</li>\n<li><h5 id=\"compile\">compile</h5>\n\n<pre><code>处理一些不需要作用域的操作，DOM处理等，返回link函数。\n注意，对当前使用的模板中的指令只会编译一遍，所以此阶段常用来做一些优化\n</code></pre></li>\n<li><h5 id=\"link\">link</h5>\n\n<pre><code>link:function(scope,element,attr,transclude)\n可以访问scope,用来注册事件处理函数等 \n注意，处在循环中的指令，链接函数在每次循环中都运行\n</code></pre></li>\n<li><h5 id=\"controller\">controller 生命周期钩子</h5>\n\n<p>  <em>controller被实例化在pre-linking阶段之前,并且能够被其他指令访问</em><br>  controller中提供了一些钩子函数，在directive的生命周期的特定阶段被调用</p>\n<ul>\n<li>$onInit<br>  在DOM元素上的所有controller初始化完成之后,会在每个controller上被调用.在这个阶段,bindings中的数据初始化<br>  (注意,初始化但可能为空，等待异步操作完成后的填充，可以理解为$onInit是bindings中数据的constructor)<br>  顾名思义，这个阶段就是做一些初始化操作,$onInit在pre,post link函数之前执行<br>  $onInit和require <pre><code>require的父组件中定义的方法可以在$onInit中使用\n</code></pre></li>\n<li><p>$onChanges(changesObj)<br>   在 &lt; @绑定的数据更新时被调用,changesObjs是一个对象，键是所绑定的属性的名，值为</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">            currentValue,</div><div class=\"line\">            previousValue, </div><div class=\"line\">            isFirstChange()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   形式的对象。<br>   onChanges钩子的一个十分重要的作用是clone bindings中的数据，来打断与外层组件的数据共享(因为 虽然 &lt; 是单向绑定,但传递的是引用,在组件内部对传递进来的数据做修改，<br>   是会污染外层数据的)</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  bindings:&#123;</div><div class=\"line\">   nList:&apos;&lt;&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  controller:function()&#123;</div><div class=\"line\">  </div><div class=\"line\">     this.$onChanges=function(changes)&#123;</div><div class=\"line\">         if(changes.nList)&#123;</div><div class=\"line\">           this.inNList=angular.copy(this.nList)</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>$onDestroy<br>  组件的作用域被销毁的时候被调用,在这个方法中我们可以释放多余的资源,监听器和相关时间处理函数<br>  onDestory方法的触发是自上而下的，意味着父组件先执行，子组件后执行</p>\n</li>\n<li><p>$postLink<br>  在当前元素及其下元素都被link之后调用，这个方法可以被用来添加DOM事件处理函数和直接的DOM操作。<br>  需要注意的时，子元素中包含templateUrl的指令在此时还没有被编译和链接,要等到template异步加载完之后才触发这两个阶段。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"required\">required</h5>\n\n<p>  用来require其他的指令或component,注入他们的controller,<br>  对directive方法来说,是注入到link方法中，作为第四个参数<br>  对component方法来说,是通过controller的this来访问</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">require://可以是string,array,object,</div><div class=\"line\">            //如果是object,形式为</div><div class=\"line\">             &#123;</div><div class=\"line\">                parentDir:&apos;?XX | ^XX | ^^XX | ?^ | ?^^&apos;</div><div class=\"line\">             &#125;</div><div class=\"line\">    </div><div class=\"line\">            directive(&apos;childDir&apos;,function()&#123;                            </div><div class=\"line\">                 return &#123;</div><div class=\"line\">                       require:&apos;^parentDir&apos;, //require父指令contorller中定义的方法</div><div class=\"line\">                       require:&apos;wrapCtrl&apos;, //require外层中的controller</div><div class=\"line\">                       link:function(scope,elemnt,attr,parentDir)&#123;</div><div class=\"line\">                          parentDir.XXXX()</div><div class=\"line\">                       &#125;</div><div class=\"line\">                &#125;   </div><div class=\"line\">            &#125;)</div><div class=\"line\">            </div><div class=\"line\">            component(&apos;childComp&apos;,&#123;</div><div class=\"line\">            </div><div class=\"line\">                require:&apos;^parentComp&apos;,</div><div class=\"line\">                controller:function()&#123;</div><div class=\"line\">                   this.$onInit=function()&#123;</div><div class=\"line\">                     this.parentComp.XXXX() //调用父组件中的方法，注意是在onInit方法中使用的，</div><div class=\"line\">                                            //因为此时当前DOM及外层的controller都初始化完毕</div><div class=\"line\">                   &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"transclude\">transclude</h5>\n\n<p>transclude用来提取一部分dom元素并把他们copy到其他地方，值得注意的是，这部分dom元素连接的scope还是原来地方的作用域。<br>主要用在把指令中包裹的DOM内容插入到指令的template中的指定位置。好处就是这部分dom还保持着原来的scope,</p>\n</li>\n</ul>\n<h3 id=\"test\">最佳实践</h3>\n\n<p>上面介绍了声明指令用到的一些常用属性，但directive方法应该不再用来自定义元素。<br>directive只用来定义属性。组件用component来定义</p>\n<p>Here are some advisories for using Directives:</p>\n<p>Never use templates, scope, bindToController or controllers<br>Always restrict: ‘A’ with Directives<br>Use compile and link where necessary<br>Remember to destroy and unbind event handlers inside $scope.$on(‘$destroy’, fn);<br>only use transclude: true when you want to create a directive that wraps arbitrary content.<br>use controller when you want to expose an API to other directives. Otherwise use link.</p>\n<p>使用component方法定义组件的注意点：</p>\n<p> 不再使用=传递数据<br> 单向数据流和事件<br> bindings数据在onChanges中复制一份</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">ES6写法</div><div class=\"line\"> .component(&apos;com&apos;,&#123;</div><div class=\"line\">    template:&apos;&apos;,</div><div class=\"line\">    binding:&#123;</div><div class=\"line\">      list:&apos;&lt;&apos;,</div><div class=\"line\">      nCallback:&apos;&amp;&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">    controller: classChildCtrl()&#123;</div><div class=\"line\">        </div><div class=\"line\">        $onInit()&#123;</div><div class=\"line\">                </div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        $onChanges()&#123;</div><div class=\"line\">            this.myList=angular.copy(this.list)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        doSomething()&#123;</div><div class=\"line\">            this.nCallback(&#123;</div><div class=\"line\">                $event:&#123;</div><div class=\"line\">                    data:someData</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"> </div><div class=\"line\"> &lt;comp list=&apos;$ctrl.list&apos; n-callback=&apos;$ctrl.somefn($event)&apos;&gt;&lt;/comp&gt;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#instruct\">指令介绍</a></li>\n<li><a href=\"#params\">使用介绍</a><ul>\n<li><a href=\"#scope\">scope</a></li>\n<li><a href=\"#controller\">controller</a></li>\n<li><a href=\"#required\">required</a></li>\n<li><a href=\"#transclude\">transclude</a></li>\n</ul>\n</li>\n<li><a href=\"#best\">最佳实践</a></li>\n</ul>\n<hr>\n<h3 id='instruct'>指令介绍</h3><br> 指令是angular中十分重要的概念,能让我们创建自定义元素,不仅是元素,还可以是（属性,注释,css class）,一般也就是自定义元素或属性。<br> 创建方法 angular.module().directive()。1.5以上版本提供了directive()的语法糖component(),只用来创建组件。<br><br>—<br><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular中各部分执行顺序</div><div class=\"line\">| config块</div><div class=\"line\">| run块   </div><div class=\"line\">| 指令 comile阶段</div><div class=\"line\">| controller 按着父子DOM结构从外到内</div><div class=\"line\">| 指令 controller阶段</div><div class=\"line\">|     包括$onInit $onChanges $doCheck $onDestroy $postLink生命周期钩子</div><div class=\"line\">|      construtor --&gt; $onChanges --&gt; $onInit --&gt; (若binding数据更新,onChanges还被执行) --&gt; $postLink </div><div class=\"line\">| 指令link pre阶段 从父指令到子指令</div><div class=\"line\">| 指令link post阶段 从子指令到父指令</div></pre></td></tr></table></figure><br><br><h3 id='params'>使用介绍</h3>\n\n<ul>\n<li><p><h5 id='scope'>scope</h5></p>\n<ul>\n<li>scope:false<br>不创建自己的scope，直接继承父类scope</li>\n<li>scope:true<br> 创建自己的作用域，但会继承父scope </li>\n<li>scope:{}<br> 独立的作用域</li>\n</ul>\n</li>\n<li><h5 id='compile'>compile</h5>\n\n<pre><code>处理一些不需要作用域的操作，DOM处理等，返回link函数。\n注意，对当前使用的模板中的指令只会编译一遍，所以此阶段常用来做一些优化\n</code></pre></li>\n<li><h5 id='link'>link</h5>\n\n<pre><code>link:function(scope,element,attr,transclude)\n可以访问scope,用来注册事件处理函数等 \n注意，处在循环中的指令，链接函数在每次循环中都运行\n</code></pre></li>\n<li><h5 id='controller'>controller 生命周期钩子</h5>\n\n<p>  <em>controller被实例化在pre-linking阶段之前,并且能够被其他指令访问</em><br>  controller中提供了一些钩子函数，在directive的生命周期的特定阶段被调用</p>\n<ul>\n<li>$onInit<br>  在DOM元素上的所有controller初始化完成之后,会在每个controller上被调用.在这个阶段,bindings中的数据初始化<br>  (注意,初始化但可能为空，等待异步操作完成后的填充，可以理解为$onInit是bindings中数据的constructor)<br>  顾名思义，这个阶段就是做一些初始化操作,$onInit在pre,post link函数之前执行<br>  $onInit和require <pre><code>require的父组件中定义的方法可以在$onInit中使用\n</code></pre></li>\n<li><p>$onChanges(changesObj)<br>   在 &lt; @绑定的数据更新时被调用,changesObjs是一个对象，键是所绑定的属性的名，值为</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">            currentValue,</div><div class=\"line\">            previousValue, </div><div class=\"line\">            isFirstChange()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   形式的对象。<br>   onChanges钩子的一个十分重要的作用是clone bindings中的数据，来打断与外层组件的数据共享(因为 虽然 &lt; 是单向绑定,但传递的是引用,在组件内部对传递进来的数据做修改，<br>   是会污染外层数据的)</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  bindings:&#123;</div><div class=\"line\">   nList:&apos;&lt;&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  controller:function()&#123;</div><div class=\"line\">  </div><div class=\"line\">     this.$onChanges=function(changes)&#123;</div><div class=\"line\">         if(changes.nList)&#123;</div><div class=\"line\">           this.inNList=angular.copy(this.nList)</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>$onDestroy<br>  组件的作用域被销毁的时候被调用,在这个方法中我们可以释放多余的资源,监听器和相关时间处理函数<br>  onDestory方法的触发是自上而下的，意味着父组件先执行，子组件后执行</p>\n</li>\n<li><p>$postLink<br>  在当前元素及其下元素都被link之后调用，这个方法可以被用来添加DOM事件处理函数和直接的DOM操作。<br>  需要注意的时，子元素中包含templateUrl的指令在此时还没有被编译和链接,要等到template异步加载完之后才触发这两个阶段。</p>\n</li>\n</ul>\n</li>\n<li><h5 id='required'>required</h5>\n\n<p>  用来require其他的指令或component,注入他们的controller,<br>  对directive方法来说,是注入到link方法中，作为第四个参数<br>  对component方法来说,是通过controller的this来访问</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">require://可以是string,array,object,</div><div class=\"line\">            //如果是object,形式为</div><div class=\"line\">             &#123;</div><div class=\"line\">                parentDir:&apos;?XX | ^XX | ^^XX | ?^ | ?^^&apos;</div><div class=\"line\">             &#125;</div><div class=\"line\">    </div><div class=\"line\">            directive(&apos;childDir&apos;,function()&#123;                            </div><div class=\"line\">                 return &#123;</div><div class=\"line\">                       require:&apos;^parentDir&apos;, //require父指令contorller中定义的方法</div><div class=\"line\">                       require:&apos;wrapCtrl&apos;, //require外层中的controller</div><div class=\"line\">                       link:function(scope,elemnt,attr,parentDir)&#123;</div><div class=\"line\">                          parentDir.XXXX()</div><div class=\"line\">                       &#125;</div><div class=\"line\">                &#125;   </div><div class=\"line\">            &#125;)</div><div class=\"line\">            </div><div class=\"line\">            component(&apos;childComp&apos;,&#123;</div><div class=\"line\">            </div><div class=\"line\">                require:&apos;^parentComp&apos;,</div><div class=\"line\">                controller:function()&#123;</div><div class=\"line\">                   this.$onInit=function()&#123;</div><div class=\"line\">                     this.parentComp.XXXX() //调用父组件中的方法，注意是在onInit方法中使用的，</div><div class=\"line\">                                            //因为此时当前DOM及外层的controller都初始化完毕</div><div class=\"line\">                   &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id='transclude'>transclude</h5>\n\n<p>transclude用来提取一部分dom元素并把他们copy到其他地方，值得注意的是，这部分dom元素连接的scope还是原来地方的作用域。<br>主要用在把指令中包裹的DOM内容插入到指令的template中的指定位置。好处就是这部分dom还保持着原来的scope,</p>\n</li>\n</ul>\n<h3 id='test'>最佳实践</h3>\n\n<p>上面介绍了声明指令用到的一些常用属性，但directive方法应该不再用来自定义元素。<br>directive只用来定义属性。组件用component来定义</p>\n<p>Here are some advisories for using Directives:</p>\n<p>Never use templates, scope, bindToController or controllers<br>Always restrict: ‘A’ with Directives<br>Use compile and link where necessary<br>Remember to destroy and unbind event handlers inside $scope.$on(‘$destroy’, fn);<br>only use transclude: true when you want to create a directive that wraps arbitrary content.<br>use controller when you want to expose an API to other directives. Otherwise use link.</p>\n<p>使用component方法定义组件的注意点：</p>\n<p> 不再使用=传递数据<br> 单向数据流和事件<br> bindings数据在onChanges中复制一份</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">ES6写法</div><div class=\"line\"> .component(&apos;com&apos;,&#123;</div><div class=\"line\">    template:&apos;&apos;,</div><div class=\"line\">    binding:&#123;</div><div class=\"line\">      list:&apos;&lt;&apos;,</div><div class=\"line\">      nCallback:&apos;&amp;&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">    controller: classChildCtrl()&#123;</div><div class=\"line\">        </div><div class=\"line\">        $onInit()&#123;</div><div class=\"line\">                </div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        $onChanges()&#123;</div><div class=\"line\">            this.myList=angular.copy(this.list)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        doSomething()&#123;</div><div class=\"line\">            this.nCallback(&#123;</div><div class=\"line\">                $event:&#123;</div><div class=\"line\">                    data:someData</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"> </div><div class=\"line\"> &lt;comp list=&apos;$ctrl.list&apos; n-callback=&apos;$ctrl.somefn($event)&apos;&gt;&lt;/comp&gt;</div></pre></td></tr></table></figure>"},{"title":"agnular module和DI详解","date":"2017-05-12T04:09:15.000Z","_content":"\n> A general rule about modules and injectors is that modules don’t actually contain any\napplication components. They just contain the recipes for creating application components,\nand the injector is where they will actually become concrete.\n\n## module loader\n\n## injector","source":"_posts/angular-module和DI详解.md","raw":"---\ntitle: agnular module和DI详解\ndate: 2017-05-12 12:09:15\ntags:  angular \n---\n\n> A general rule about modules and injectors is that modules don’t actually contain any\napplication components. They just contain the recipes for creating application components,\nand the injector is where they will actually become concrete.\n\n## module loader\n\n## injector","slug":"angular-module和DI详解","published":1,"updated":"2017-05-15T02:53:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm0l000609rt3q6rkaye","content":"<blockquote>\n<p>A general rule about modules and injectors is that modules don’t actually contain any<br>application components. They just contain the recipes for creating application components,<br>and the injector is where they will actually become concrete.</p>\n</blockquote>\n<h2 id=\"module-loader\"><a href=\"#module-loader\" class=\"headerlink\" title=\"module loader\"></a>module loader</h2><h2 id=\"injector\"><a href=\"#injector\" class=\"headerlink\" title=\"injector\"></a>injector</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>A general rule about modules and injectors is that modules don’t actually contain any<br>application components. They just contain the recipes for creating application components,<br>and the injector is where they will actually become concrete.</p>\n</blockquote>\n<h2 id=\"module-loader\"><a href=\"#module-loader\" class=\"headerlink\" title=\"module loader\"></a>module loader</h2><h2 id=\"injector\"><a href=\"#injector\" class=\"headerlink\" title=\"injector\"></a>injector</h2>"},{"title":"Array","date":"2017-05-02T10:43:25.000Z","_content":"\n整理一些数组相关的常用方法，代码片段。\n\n","source":"_posts/Array.md","raw":"---\ntitle: Array\ndate: 2017-05-02 18:43:25\ntags: javascript\n---\n\n整理一些数组相关的常用方法，代码片段。\n\n","slug":"Array","published":1,"updated":"2017-05-03T06:14:10.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm0p000709rtrr1mar9r","content":"<p>整理一些数组相关的常用方法，代码片段。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>整理一些数组相关的常用方法，代码片段。</p>\n"},{"title":"angular-component","date":"2016-10-03T10:17:09.000Z","_content":"\nangular中定义directives,components的一些最佳实践,结合ES6写法\n\n- [component](#component)\n    \n    - [controller](#controller)\n    \n        - [生命周期钩子](#生命周期钩子)\n        \n    - [单向数据流和事件](#单向数据流和事件)\n    \n    - [routed components](#routed-components)\n    \n- [directive](#directive)\n\n\n## component\n\n  - ### controller\n\n      1. 控制器应该只用在component定义中\n\n      2. 使用es6 class定义controller,在constructor中进行依赖注入\n    \n         ```\n            .component('testComp',{\n                template:'',\n                contorller:class Ctrl{\n                \n                    constructor($http,$timeout){\n                     'ngInject'   \n                    }\n                }\n            })\n        ```\n\n\n     -  #### 生命周期钩子\n   \n        1. 初始化代码放在$onInit中\n   \n        2. 在$onChanges中监听bindings数据变化,对传入的数组或对象copy一份以打断内外组件的数据交互\n   \n        3. 事件处理放在$postLink中\n   \n            ```\n                bindings:{\n                    nList:'<'\n                },\n                controller:class Ctrl{\n            \n                    $onChanges(change){\n            \n                        if(change.nList){\n                              this.innerList=Object.assign({},this.nList)\n                         }\n            \n                     }  \n                }\n             ```\n   \n  -  ### 单向数据流和事件\n    \n    bindings中不在使用'=',数据的传递只使用‘<’和‘@’,并且在$onChanges中打断数据的连接\n    子组件中要和父组件进行数据交互采用事件方式\n    \n    ```\n        \n        .component('parentComp',{\n            template:'<child-comp n-list='$ctrl.list' n-add-item='$ctrl.addItem($event)'></child-comp>'\n            controller:class ParentCtrl{\n                \n                $onInit(){\n                    this.list=[]\n                }\n                \n                addItem({item}){\n                    this.list=this.list.concat([item])\n                }\n                \n            }\n        })\n        \n        .component('childComp',{\n            bindings:{\n                nList:'<',\n                nAddItem:'&'\n            },\n            controller:function(){\n                \n                $onInit(){\n                    this.news={\n                        content:''\n                    }\n                }\n                $onChanges(changes){\n                    if(changes.nList){\n                        this.list=angular.copy(this.nList)\n                    }\n                }\n                add(){\n                    this.nAddItem({\n                        $event:{\n                            item:this.news\n                        }\n                    })\n                }\n                \n            }\n        })\n        \n    ```\n  - ### routed components\n  \n    routed components就是一个‘父组件’,它内部所需要的数据不是bindings其他组件中的数据。\n    不同于自己调用service查询出来，数据是通过路由resolve获取到的\n    \n    ```\n        \n        .component('someComp',{\n        \n            bindings:{\n                todoList:'<'\n            },\n            controller: class someCtrl{\n                ....\n            }    \n        })\n        .service('someService',class SService{\n            ....\n        })\n        .config($stateProvider => {\n        \n            $stateProvider.state('someState',{\n                url:'someUrl',\n                component:'someComp',\n                resolve:{\n                    todoList: someService => {\n                        return someService.getTodoList()\n                    }\n                }\n            })\n        \n        })\n    ```\n  \n    \n## directive\n\n   只用directive定义属性 ’A‘\n   不使用scope\n   \n   ```\n        定义directived的class写法\n        \n        export class TodoAutoFocus {\n          constructor($timeout) {\n            'ngInject';\n            this.restrict = 'A';\n            this.$timeout = $timeout;\n          }\n          link($scope, $element, $attrs) {\n            $scope.$watch($attrs.todoAutofocus, (newValue, oldValue) => {\n              if (!newValue) {\n                return;\n              }\n              this.$timeout(() => $element[0].focus());\n            });\n          }\n        }\n        \n        .directive('todoAutofocus', () => new TodoAutoFocus())\n    \n   ```\n","source":"_posts/angular-component.md","raw":"---\ntitle: angular-component\ndate: 2016-10-03 18:17:09\ntags: angular\n---\n\nangular中定义directives,components的一些最佳实践,结合ES6写法\n\n- [component](#component)\n    \n    - [controller](#controller)\n    \n        - [生命周期钩子](#生命周期钩子)\n        \n    - [单向数据流和事件](#单向数据流和事件)\n    \n    - [routed components](#routed-components)\n    \n- [directive](#directive)\n\n\n## component\n\n  - ### controller\n\n      1. 控制器应该只用在component定义中\n\n      2. 使用es6 class定义controller,在constructor中进行依赖注入\n    \n         ```\n            .component('testComp',{\n                template:'',\n                contorller:class Ctrl{\n                \n                    constructor($http,$timeout){\n                     'ngInject'   \n                    }\n                }\n            })\n        ```\n\n\n     -  #### 生命周期钩子\n   \n        1. 初始化代码放在$onInit中\n   \n        2. 在$onChanges中监听bindings数据变化,对传入的数组或对象copy一份以打断内外组件的数据交互\n   \n        3. 事件处理放在$postLink中\n   \n            ```\n                bindings:{\n                    nList:'<'\n                },\n                controller:class Ctrl{\n            \n                    $onChanges(change){\n            \n                        if(change.nList){\n                              this.innerList=Object.assign({},this.nList)\n                         }\n            \n                     }  \n                }\n             ```\n   \n  -  ### 单向数据流和事件\n    \n    bindings中不在使用'=',数据的传递只使用‘<’和‘@’,并且在$onChanges中打断数据的连接\n    子组件中要和父组件进行数据交互采用事件方式\n    \n    ```\n        \n        .component('parentComp',{\n            template:'<child-comp n-list='$ctrl.list' n-add-item='$ctrl.addItem($event)'></child-comp>'\n            controller:class ParentCtrl{\n                \n                $onInit(){\n                    this.list=[]\n                }\n                \n                addItem({item}){\n                    this.list=this.list.concat([item])\n                }\n                \n            }\n        })\n        \n        .component('childComp',{\n            bindings:{\n                nList:'<',\n                nAddItem:'&'\n            },\n            controller:function(){\n                \n                $onInit(){\n                    this.news={\n                        content:''\n                    }\n                }\n                $onChanges(changes){\n                    if(changes.nList){\n                        this.list=angular.copy(this.nList)\n                    }\n                }\n                add(){\n                    this.nAddItem({\n                        $event:{\n                            item:this.news\n                        }\n                    })\n                }\n                \n            }\n        })\n        \n    ```\n  - ### routed components\n  \n    routed components就是一个‘父组件’,它内部所需要的数据不是bindings其他组件中的数据。\n    不同于自己调用service查询出来，数据是通过路由resolve获取到的\n    \n    ```\n        \n        .component('someComp',{\n        \n            bindings:{\n                todoList:'<'\n            },\n            controller: class someCtrl{\n                ....\n            }    \n        })\n        .service('someService',class SService{\n            ....\n        })\n        .config($stateProvider => {\n        \n            $stateProvider.state('someState',{\n                url:'someUrl',\n                component:'someComp',\n                resolve:{\n                    todoList: someService => {\n                        return someService.getTodoList()\n                    }\n                }\n            })\n        \n        })\n    ```\n  \n    \n## directive\n\n   只用directive定义属性 ’A‘\n   不使用scope\n   \n   ```\n        定义directived的class写法\n        \n        export class TodoAutoFocus {\n          constructor($timeout) {\n            'ngInject';\n            this.restrict = 'A';\n            this.$timeout = $timeout;\n          }\n          link($scope, $element, $attrs) {\n            $scope.$watch($attrs.todoAutofocus, (newValue, oldValue) => {\n              if (!newValue) {\n                return;\n              }\n              this.$timeout(() => $element[0].focus());\n            });\n          }\n        }\n        \n        .directive('todoAutofocus', () => new TodoAutoFocus())\n    \n   ```\n","slug":"angular-component","published":1,"updated":"2017-05-03T10:22:26.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm0v000a09rt21mf00bg","content":"<p>angular中定义directives,components的一些最佳实践,结合ES6写法</p>\n<ul>\n<li><p><a href=\"#component\">component</a></p>\n<ul>\n<li><p><a href=\"#controller\">controller</a></p>\n<ul>\n<li><a href=\"#生命周期钩子\">生命周期钩子</a></li>\n</ul>\n</li>\n<li><p><a href=\"#单向数据流和事件\">单向数据流和事件</a></p>\n</li>\n<li><p><a href=\"#routed-components\">routed components</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#directive\">directive</a></p>\n</li>\n</ul>\n<h2 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h2><ul>\n<li><h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><ol>\n<li><p>控制器应该只用在component定义中</p>\n</li>\n<li><p>使用es6 class定义controller,在constructor中进行依赖注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.component(&apos;testComp&apos;,&#123;</div><div class=\"line\">    template:&apos;&apos;,</div><div class=\"line\">    contorller:class Ctrl&#123;</div><div class=\"line\">    </div><div class=\"line\">        constructor($http,$timeout)&#123;</div><div class=\"line\">         &apos;ngInject&apos;   </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"生命周期钩子\"><a href=\"#生命周期钩子\" class=\"headerlink\" title=\"生命周期钩子\"></a>生命周期钩子</h4></li>\n</ul>\n<ol>\n<li><p>初始化代码放在$onInit中</p>\n</li>\n<li><p>在$onChanges中监听bindings数据变化,对传入的数组或对象copy一份以打断内外组件的数据交互</p>\n</li>\n<li><p>事件处理放在$postLink中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">bindings:&#123;</div><div class=\"line\">    nList:&apos;&lt;&apos;</div><div class=\"line\">&#125;,</div><div class=\"line\">controller:class Ctrl&#123;</div><div class=\"line\">            </div><div class=\"line\">    $onChanges(change)&#123;</div><div class=\"line\">            </div><div class=\"line\">        if(change.nList)&#123;</div><div class=\"line\">              this.innerList=Object.assign(&#123;&#125;,this.nList)</div><div class=\"line\">         &#125;</div><div class=\"line\">            </div><div class=\"line\">     &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"单向数据流和事件\"><a href=\"#单向数据流和事件\" class=\"headerlink\" title=\"单向数据流和事件\"></a>单向数据流和事件</h3><p>bindings中不在使用’=’,数据的传递只使用‘&lt;’和‘@’,并且在$onChanges中打断数据的连接<br>子组件中要和父组件进行数据交互采用事件方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.component(&apos;parentComp&apos;,&#123;</div><div class=\"line\">    template:&apos;&lt;child-comp n-list=&apos;$ctrl.list&apos; n-add-item=&apos;$ctrl.addItem($event)&apos;&gt;&lt;/child-comp&gt;&apos;</div><div class=\"line\">    controller:class ParentCtrl&#123;</div><div class=\"line\">        </div><div class=\"line\">        $onInit()&#123;</div><div class=\"line\">            this.list=[]</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        addItem(&#123;item&#125;)&#123;</div><div class=\"line\">            this.list=this.list.concat([item])</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">.component(&apos;childComp&apos;,&#123;</div><div class=\"line\">    bindings:&#123;</div><div class=\"line\">        nList:&apos;&lt;&apos;,</div><div class=\"line\">        nAddItem:&apos;&amp;&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    controller:function()&#123;</div><div class=\"line\">        </div><div class=\"line\">        $onInit()&#123;</div><div class=\"line\">            this.news=&#123;</div><div class=\"line\">                content:&apos;&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $onChanges(changes)&#123;</div><div class=\"line\">            if(changes.nList)&#123;</div><div class=\"line\">                this.list=angular.copy(this.nList)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        add()&#123;</div><div class=\"line\">            this.nAddItem(&#123;</div><div class=\"line\">                $event:&#123;</div><div class=\"line\">                    item:this.news</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"routed-components\"><a href=\"#routed-components\" class=\"headerlink\" title=\"routed components\"></a>routed components</h3><p>routed components就是一个‘父组件’,它内部所需要的数据不是bindings其他组件中的数据。<br>不同于自己调用service查询出来，数据是通过路由resolve获取到的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.component(&apos;someComp&apos;,&#123;</div><div class=\"line\"></div><div class=\"line\">    bindings:&#123;</div><div class=\"line\">        todoList:&apos;&lt;&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    controller: class someCtrl&#123;</div><div class=\"line\">        ....</div><div class=\"line\">    &#125;    </div><div class=\"line\">&#125;)</div><div class=\"line\">.service(&apos;someService&apos;,class SService&#123;</div><div class=\"line\">    ....</div><div class=\"line\">&#125;)</div><div class=\"line\">.config($stateProvider =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    $stateProvider.state(&apos;someState&apos;,&#123;</div><div class=\"line\">        url:&apos;someUrl&apos;,</div><div class=\"line\">        component:&apos;someComp&apos;,</div><div class=\"line\">        resolve:&#123;</div><div class=\"line\">            todoList: someService =&gt; &#123;</div><div class=\"line\">                return someService.getTodoList()</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"directive\"><a href=\"#directive\" class=\"headerlink\" title=\"directive\"></a>directive</h2><p>   只用directive定义属性 ’A‘<br>   不使用scope</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">定义directived的class写法</div><div class=\"line\"></div><div class=\"line\">export class TodoAutoFocus &#123;</div><div class=\"line\">  constructor($timeout) &#123;</div><div class=\"line\">    &apos;ngInject&apos;;</div><div class=\"line\">    this.restrict = &apos;A&apos;;</div><div class=\"line\">    this.$timeout = $timeout;</div><div class=\"line\">  &#125;</div><div class=\"line\">  link($scope, $element, $attrs) &#123;</div><div class=\"line\">    $scope.$watch($attrs.todoAutofocus, (newValue, oldValue) =&gt; &#123;</div><div class=\"line\">      if (!newValue) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">      &#125;</div><div class=\"line\">      this.$timeout(() =&gt; $element[0].focus());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.directive(&apos;todoAutofocus&apos;, () =&gt; new TodoAutoFocus())</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>angular中定义directives,components的一些最佳实践,结合ES6写法</p>\n<ul>\n<li><p><a href=\"#component\">component</a></p>\n<ul>\n<li><p><a href=\"#controller\">controller</a></p>\n<ul>\n<li><a href=\"#生命周期钩子\">生命周期钩子</a></li>\n</ul>\n</li>\n<li><p><a href=\"#单向数据流和事件\">单向数据流和事件</a></p>\n</li>\n<li><p><a href=\"#routed-components\">routed components</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#directive\">directive</a></p>\n</li>\n</ul>\n<h2 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h2><ul>\n<li><h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><ol>\n<li><p>控制器应该只用在component定义中</p>\n</li>\n<li><p>使用es6 class定义controller,在constructor中进行依赖注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.component(&apos;testComp&apos;,&#123;</div><div class=\"line\">    template:&apos;&apos;,</div><div class=\"line\">    contorller:class Ctrl&#123;</div><div class=\"line\">    </div><div class=\"line\">        constructor($http,$timeout)&#123;</div><div class=\"line\">         &apos;ngInject&apos;   </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"生命周期钩子\"><a href=\"#生命周期钩子\" class=\"headerlink\" title=\"生命周期钩子\"></a>生命周期钩子</h4></li>\n</ul>\n<ol>\n<li><p>初始化代码放在$onInit中</p>\n</li>\n<li><p>在$onChanges中监听bindings数据变化,对传入的数组或对象copy一份以打断内外组件的数据交互</p>\n</li>\n<li><p>事件处理放在$postLink中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">bindings:&#123;</div><div class=\"line\">    nList:&apos;&lt;&apos;</div><div class=\"line\">&#125;,</div><div class=\"line\">controller:class Ctrl&#123;</div><div class=\"line\">            </div><div class=\"line\">    $onChanges(change)&#123;</div><div class=\"line\">            </div><div class=\"line\">        if(change.nList)&#123;</div><div class=\"line\">              this.innerList=Object.assign(&#123;&#125;,this.nList)</div><div class=\"line\">         &#125;</div><div class=\"line\">            </div><div class=\"line\">     &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"单向数据流和事件\"><a href=\"#单向数据流和事件\" class=\"headerlink\" title=\"单向数据流和事件\"></a>单向数据流和事件</h3><p>bindings中不在使用’=’,数据的传递只使用‘&lt;’和‘@’,并且在$onChanges中打断数据的连接<br>子组件中要和父组件进行数据交互采用事件方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.component(&apos;parentComp&apos;,&#123;</div><div class=\"line\">    template:&apos;&lt;child-comp n-list=&apos;$ctrl.list&apos; n-add-item=&apos;$ctrl.addItem($event)&apos;&gt;&lt;/child-comp&gt;&apos;</div><div class=\"line\">    controller:class ParentCtrl&#123;</div><div class=\"line\">        </div><div class=\"line\">        $onInit()&#123;</div><div class=\"line\">            this.list=[]</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        addItem(&#123;item&#125;)&#123;</div><div class=\"line\">            this.list=this.list.concat([item])</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">.component(&apos;childComp&apos;,&#123;</div><div class=\"line\">    bindings:&#123;</div><div class=\"line\">        nList:&apos;&lt;&apos;,</div><div class=\"line\">        nAddItem:&apos;&amp;&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    controller:function()&#123;</div><div class=\"line\">        </div><div class=\"line\">        $onInit()&#123;</div><div class=\"line\">            this.news=&#123;</div><div class=\"line\">                content:&apos;&apos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $onChanges(changes)&#123;</div><div class=\"line\">            if(changes.nList)&#123;</div><div class=\"line\">                this.list=angular.copy(this.nList)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        add()&#123;</div><div class=\"line\">            this.nAddItem(&#123;</div><div class=\"line\">                $event:&#123;</div><div class=\"line\">                    item:this.news</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"routed-components\"><a href=\"#routed-components\" class=\"headerlink\" title=\"routed components\"></a>routed components</h3><p>routed components就是一个‘父组件’,它内部所需要的数据不是bindings其他组件中的数据。<br>不同于自己调用service查询出来，数据是通过路由resolve获取到的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.component(&apos;someComp&apos;,&#123;</div><div class=\"line\"></div><div class=\"line\">    bindings:&#123;</div><div class=\"line\">        todoList:&apos;&lt;&apos;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    controller: class someCtrl&#123;</div><div class=\"line\">        ....</div><div class=\"line\">    &#125;    </div><div class=\"line\">&#125;)</div><div class=\"line\">.service(&apos;someService&apos;,class SService&#123;</div><div class=\"line\">    ....</div><div class=\"line\">&#125;)</div><div class=\"line\">.config($stateProvider =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    $stateProvider.state(&apos;someState&apos;,&#123;</div><div class=\"line\">        url:&apos;someUrl&apos;,</div><div class=\"line\">        component:&apos;someComp&apos;,</div><div class=\"line\">        resolve:&#123;</div><div class=\"line\">            todoList: someService =&gt; &#123;</div><div class=\"line\">                return someService.getTodoList()</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"directive\"><a href=\"#directive\" class=\"headerlink\" title=\"directive\"></a>directive</h2><p>   只用directive定义属性 ’A‘<br>   不使用scope</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">定义directived的class写法</div><div class=\"line\"></div><div class=\"line\">export class TodoAutoFocus &#123;</div><div class=\"line\">  constructor($timeout) &#123;</div><div class=\"line\">    &apos;ngInject&apos;;</div><div class=\"line\">    this.restrict = &apos;A&apos;;</div><div class=\"line\">    this.$timeout = $timeout;</div><div class=\"line\">  &#125;</div><div class=\"line\">  link($scope, $element, $attrs) &#123;</div><div class=\"line\">    $scope.$watch($attrs.todoAutofocus, (newValue, oldValue) =&gt; &#123;</div><div class=\"line\">      if (!newValue) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">      &#125;</div><div class=\"line\">      this.$timeout(() =&gt; $element[0].focus());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.directive(&apos;todoAutofocus&apos;, () =&gt; new TodoAutoFocus())</div></pre></td></tr></table></figure>\n"},{"title":"Object","date":"2017-05-02T10:43:33.000Z","_content":"","source":"_posts/Object.md","raw":"---\ntitle: Object\ndate: 2017-05-02 18:43:33\ntags: javascript\n---\n","slug":"Object","published":1,"updated":"2017-05-02T10:48:05.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm0x000c09rtct86sl8l","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"es6学习笔记(二)","date":"2016-09-08T10:39:28.000Z","_content":"\n- [解构赋值](#解构赋值)\n- [set](#Set)\n- [map](#Map)\n\n## 解构赋值\n\n解构赋值用来提取对象或数组中的数据到不同的变量中。\n\n - 数组解构\n\n    数组解构的使用场景：\n    \n    1、 变量赋值\n\n    ```\n        let arr=[3,5,7]\n        let [one,two]=arr\n        console.log(one) //3\n        console.log(two) //5\n\n        结合rest patten的使用\n        let activities=['watch TV','dance' ，’play‘]\n        const [first,...rest]=activities\n        console.log(first) // watch TV\n        console.log(rest) //['dance','play'\n        ]\n    ```\n\n    2、 交换变量\n\n    ```\n        let prev=4\n        let next=5\n        [prev,next]=[next,prev]\n\n    ```\n\n - 对象解构\n\n    对象解构的使用场景：\n\n    1、变量赋值\n\n    ```\n        let o = {p: 42, q: true};\n        let {p, q} = o;\n        console.log(p); // 42\n        console.log(q); // true\n\n        *注意()的使用*\n        let p,q\n        ({p,q}=o)\n        console.log(p); // 42\n        console.log(q); // true\n\n        比较: 使用对象进行解构赋值的时候,如果赋值操作左边不是变量声明，则整个的赋值运算要放到()内部,因为没有申明的话{p,q}会被当成代码块而不是对象字面量。\n        \n\n    ```\n    2、分配默认值\n\n    ```\n        let {a=5,b=1}={a:10}\n        console.log(a) //10\n        console.log(b) //1\n    ```\n\n    3、为function的参数设置默认值\n\n    ```\n        function drag( {radius=50, point={x:0, y:0}} ){\n                console.log(radius,point.x,point.y)\n        }\n\n        drag({\n            point:{\n                x:100,\n                y:100\n            }\n        })  \n        // 50,100,100\n\n        完全使用默认值\n        drag({})\n\n    ```\n## Set\n\nSet中存储的值只能是唯一的，不管是基本类型的还是对象类型的。我们可以按元素插入的顺序来迭代Set。\n\n #### value equality\n\n对于Set来说,-0和+0是不相等的，NaN和undefined也可以存储在Set中,并且NaN==NaN,虽然在js中NaN!==NaN\n\n #### 常用属性和方法\n\n    size : 元素的number\n \n    add(value)\n\n    clear() : 清除所有元素\n\n    delete(value) ： 删除特定元素\n\n    has() : return boolean\n\n    entries() ： 返回一个包含每一个元素的数组的新的迭代对象\n\n    ```\n\n        let mySet=new Set([1,2,3,4])\n        for(const [key,value] of mySet.entries()){\n            //key values是一样的\n            console.log(key) // 1,2,3,4\n         }\n\n    ```\n\n    keys() values() :一样，返回一个包含所有元素的可迭代对象\n\n    ```\n        const mySet=new Set([1,2,3,4,5,6,7])\n        for(let item of mySet.keys()){\n             console.log(item)\n        }\n        for(let item of mySet.values()){\n            console.log(item)\n         }\n     ```\n\n\n    Set Array之间的相互转换\n\n    ```\n        array--->set\n        const arr=['v1','v2','v3']\n        const set =new Set(arr)\n\n         set-->array\n        const arr1=Array.from(set)\n        console.log([...set])\n\n     ```\n\n\n## Map\n\nkey/value的映射,任何类型的值都可以用做key或value。注意对象只能string,symbols做key。\n\n #### 属性方法\n\n    size()  set(key, value)  get(key)  has(key)  clear() \n\n    delete(key)   entries()   keys()  values()\n\n    forEach(callbackFn[, thisArg])\n\n    迭代:\n    ```\n        myMap.forEach(function(value, key) {\n            console.log(key + ' = ' + value);\n        });\n\n        for (var [key, value] of myMap) {\n            console.log(key + ' = ' + value);\n        }\n\n        for (var key of myMap.keys()) {\n            console.log(key);\n        }\n\n         for (var value of myMap.values()) {\n            console.log(value);\n        }   \n\n        for (var [key, value] of myMap.entries()) {\n            console.log(key + ' = ' + value);\n        }\n\n    ```","source":"_posts/es6学习笔记-二.md","raw":"---\ntitle: es6学习笔记(二)\ndate: 2016-09-08 18:39:28\ntags: es6\n---\n\n- [解构赋值](#解构赋值)\n- [set](#Set)\n- [map](#Map)\n\n## 解构赋值\n\n解构赋值用来提取对象或数组中的数据到不同的变量中。\n\n - 数组解构\n\n    数组解构的使用场景：\n    \n    1、 变量赋值\n\n    ```\n        let arr=[3,5,7]\n        let [one,two]=arr\n        console.log(one) //3\n        console.log(two) //5\n\n        结合rest patten的使用\n        let activities=['watch TV','dance' ，’play‘]\n        const [first,...rest]=activities\n        console.log(first) // watch TV\n        console.log(rest) //['dance','play'\n        ]\n    ```\n\n    2、 交换变量\n\n    ```\n        let prev=4\n        let next=5\n        [prev,next]=[next,prev]\n\n    ```\n\n - 对象解构\n\n    对象解构的使用场景：\n\n    1、变量赋值\n\n    ```\n        let o = {p: 42, q: true};\n        let {p, q} = o;\n        console.log(p); // 42\n        console.log(q); // true\n\n        *注意()的使用*\n        let p,q\n        ({p,q}=o)\n        console.log(p); // 42\n        console.log(q); // true\n\n        比较: 使用对象进行解构赋值的时候,如果赋值操作左边不是变量声明，则整个的赋值运算要放到()内部,因为没有申明的话{p,q}会被当成代码块而不是对象字面量。\n        \n\n    ```\n    2、分配默认值\n\n    ```\n        let {a=5,b=1}={a:10}\n        console.log(a) //10\n        console.log(b) //1\n    ```\n\n    3、为function的参数设置默认值\n\n    ```\n        function drag( {radius=50, point={x:0, y:0}} ){\n                console.log(radius,point.x,point.y)\n        }\n\n        drag({\n            point:{\n                x:100,\n                y:100\n            }\n        })  \n        // 50,100,100\n\n        完全使用默认值\n        drag({})\n\n    ```\n## Set\n\nSet中存储的值只能是唯一的，不管是基本类型的还是对象类型的。我们可以按元素插入的顺序来迭代Set。\n\n #### value equality\n\n对于Set来说,-0和+0是不相等的，NaN和undefined也可以存储在Set中,并且NaN==NaN,虽然在js中NaN!==NaN\n\n #### 常用属性和方法\n\n    size : 元素的number\n \n    add(value)\n\n    clear() : 清除所有元素\n\n    delete(value) ： 删除特定元素\n\n    has() : return boolean\n\n    entries() ： 返回一个包含每一个元素的数组的新的迭代对象\n\n    ```\n\n        let mySet=new Set([1,2,3,4])\n        for(const [key,value] of mySet.entries()){\n            //key values是一样的\n            console.log(key) // 1,2,3,4\n         }\n\n    ```\n\n    keys() values() :一样，返回一个包含所有元素的可迭代对象\n\n    ```\n        const mySet=new Set([1,2,3,4,5,6,7])\n        for(let item of mySet.keys()){\n             console.log(item)\n        }\n        for(let item of mySet.values()){\n            console.log(item)\n         }\n     ```\n\n\n    Set Array之间的相互转换\n\n    ```\n        array--->set\n        const arr=['v1','v2','v3']\n        const set =new Set(arr)\n\n         set-->array\n        const arr1=Array.from(set)\n        console.log([...set])\n\n     ```\n\n\n## Map\n\nkey/value的映射,任何类型的值都可以用做key或value。注意对象只能string,symbols做key。\n\n #### 属性方法\n\n    size()  set(key, value)  get(key)  has(key)  clear() \n\n    delete(key)   entries()   keys()  values()\n\n    forEach(callbackFn[, thisArg])\n\n    迭代:\n    ```\n        myMap.forEach(function(value, key) {\n            console.log(key + ' = ' + value);\n        });\n\n        for (var [key, value] of myMap) {\n            console.log(key + ' = ' + value);\n        }\n\n        for (var key of myMap.keys()) {\n            console.log(key);\n        }\n\n         for (var value of myMap.values()) {\n            console.log(value);\n        }   \n\n        for (var [key, value] of myMap.entries()) {\n            console.log(key + ' = ' + value);\n        }\n\n    ```","slug":"es6学习笔记-二","published":1,"updated":"2017-05-03T10:15:08.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm10000f09rtf79lyl61","content":"<ul>\n<li><a href=\"#解构赋值\">解构赋值</a></li>\n<li><a href=\"#Set\">set</a></li>\n<li><a href=\"#Map\">map</a></li>\n</ul>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><p>解构赋值用来提取对象或数组中的数据到不同的变量中。</p>\n<ul>\n<li><p>数组解构</p>\n<p> 数组解构的使用场景：</p>\n<p> 1、 变量赋值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">let arr=[3,5,7]</div><div class=\"line\">let [one,two]=arr</div><div class=\"line\">console.log(one) //3</div><div class=\"line\">console.log(two) //5</div><div class=\"line\"></div><div class=\"line\">结合rest patten的使用</div><div class=\"line\">let activities=[&apos;watch TV&apos;,&apos;dance&apos; ，’play‘]</div><div class=\"line\">const [first,...rest]=activities</div><div class=\"line\">console.log(first) // watch TV</div><div class=\"line\">console.log(rest) //[&apos;dance&apos;,&apos;play&apos;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p> 2、 交换变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let prev=4</div><div class=\"line\">let next=5</div><div class=\"line\">[prev,next]=[next,prev]</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象解构</p>\n<p> 对象解构的使用场景：</p>\n<p> 1、变量赋值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">let o = &#123;p: 42, q: true&#125;;</div><div class=\"line\">let &#123;p, q&#125; = o;</div><div class=\"line\">console.log(p); // 42</div><div class=\"line\">console.log(q); // true</div><div class=\"line\"></div><div class=\"line\">*注意()的使用*</div><div class=\"line\">let p,q</div><div class=\"line\">(&#123;p,q&#125;=o)</div><div class=\"line\">console.log(p); // 42</div><div class=\"line\">console.log(q); // true</div><div class=\"line\"></div><div class=\"line\">比较: 使用对象进行解构赋值的时候,如果赋值操作左边不是变量声明，则整个的赋值运算要放到()内部,因为没有申明的话&#123;p,q&#125;会被当成代码块而不是对象字面量。</div></pre></td></tr></table></figure>\n<p> 2、分配默认值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let &#123;a=5,b=1&#125;=&#123;a:10&#125;</div><div class=\"line\">console.log(a) //10</div><div class=\"line\">console.log(b) //1</div></pre></td></tr></table></figure>\n<p> 3、为function的参数设置默认值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function drag( &#123;radius=50, point=&#123;x:0, y:0&#125;&#125; )&#123;</div><div class=\"line\">        console.log(radius,point.x,point.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">drag(&#123;</div><div class=\"line\">    point:&#123;</div><div class=\"line\">        x:100,</div><div class=\"line\">        y:100</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)  </div><div class=\"line\">// 50,100,100</div><div class=\"line\"></div><div class=\"line\">完全使用默认值</div><div class=\"line\">drag(&#123;&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>Set中存储的值只能是唯一的，不管是基本类型的还是对象类型的。我们可以按元素插入的顺序来迭代Set。</p>\n<h4 id=\"value-equality\"><a href=\"#value-equality\" class=\"headerlink\" title=\"value equality\"></a>value equality</h4><p>对于Set来说,-0和+0是不相等的，NaN和undefined也可以存储在Set中,并且NaN==NaN,虽然在js中NaN!==NaN</p>\n<h4 id=\"常用属性和方法\"><a href=\"#常用属性和方法\" class=\"headerlink\" title=\"常用属性和方法\"></a>常用属性和方法</h4><pre><code>size : 元素的number\n\nadd(value)\n\nclear() : 清除所有元素\n\ndelete(value) ： 删除特定元素\n\nhas() : return boolean\n\nentries() ： 返回一个包含每一个元素的数组的新的迭代对象\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">let mySet=new Set([1,2,3,4])</div><div class=\"line\">for(const [key,value] of mySet.entries())&#123;</div><div class=\"line\">    //key values是一样的</div><div class=\"line\">    console.log(key) // 1,2,3,4</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n\nkeys() values() :一样，返回一个包含所有元素的可迭代对象\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mySet=new Set([1,2,3,4,5,6,7])</div><div class=\"line\">for(let item of mySet.keys())&#123;</div><div class=\"line\">     console.log(item)</div><div class=\"line\">&#125;</div><div class=\"line\">for(let item of mySet.values())&#123;</div><div class=\"line\">    console.log(item)</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n\nSet Array之间的相互转换\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">array---&gt;set</div><div class=\"line\">const arr=[&apos;v1&apos;,&apos;v2&apos;,&apos;v3&apos;]</div><div class=\"line\">const set =new Set(arr)</div><div class=\"line\"></div><div class=\"line\"> set--&gt;array</div><div class=\"line\">const arr1=Array.from(set)</div><div class=\"line\">console.log([...set])</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p>key/value的映射,任何类型的值都可以用做key或value。注意对象只能string,symbols做key。</p>\n<h4 id=\"属性方法\"><a href=\"#属性方法\" class=\"headerlink\" title=\"属性方法\"></a>属性方法</h4><pre><code>size()  set(key, value)  get(key)  has(key)  clear() \n\ndelete(key)   entries()   keys()  values()\n\nforEach(callbackFn[, thisArg])\n\n迭代:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">myMap.forEach(function(value, key) &#123;</div><div class=\"line\">    console.log(key + &apos; = &apos; + value);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">for (var [key, value] of myMap) &#123;</div><div class=\"line\">    console.log(key + &apos; = &apos; + value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for (var key of myMap.keys()) &#123;</div><div class=\"line\">    console.log(key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> for (var value of myMap.values()) &#123;</div><div class=\"line\">    console.log(value);</div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\">for (var [key, value] of myMap.entries()) &#123;</div><div class=\"line\">    console.log(key + &apos; = &apos; + value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#解构赋值\">解构赋值</a></li>\n<li><a href=\"#Set\">set</a></li>\n<li><a href=\"#Map\">map</a></li>\n</ul>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><p>解构赋值用来提取对象或数组中的数据到不同的变量中。</p>\n<ul>\n<li><p>数组解构</p>\n<p> 数组解构的使用场景：</p>\n<p> 1、 变量赋值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">let arr=[3,5,7]</div><div class=\"line\">let [one,two]=arr</div><div class=\"line\">console.log(one) //3</div><div class=\"line\">console.log(two) //5</div><div class=\"line\"></div><div class=\"line\">结合rest patten的使用</div><div class=\"line\">let activities=[&apos;watch TV&apos;,&apos;dance&apos; ，’play‘]</div><div class=\"line\">const [first,...rest]=activities</div><div class=\"line\">console.log(first) // watch TV</div><div class=\"line\">console.log(rest) //[&apos;dance&apos;,&apos;play&apos;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p> 2、 交换变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let prev=4</div><div class=\"line\">let next=5</div><div class=\"line\">[prev,next]=[next,prev]</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象解构</p>\n<p> 对象解构的使用场景：</p>\n<p> 1、变量赋值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">let o = &#123;p: 42, q: true&#125;;</div><div class=\"line\">let &#123;p, q&#125; = o;</div><div class=\"line\">console.log(p); // 42</div><div class=\"line\">console.log(q); // true</div><div class=\"line\"></div><div class=\"line\">*注意()的使用*</div><div class=\"line\">let p,q</div><div class=\"line\">(&#123;p,q&#125;=o)</div><div class=\"line\">console.log(p); // 42</div><div class=\"line\">console.log(q); // true</div><div class=\"line\"></div><div class=\"line\">比较: 使用对象进行解构赋值的时候,如果赋值操作左边不是变量声明，则整个的赋值运算要放到()内部,因为没有申明的话&#123;p,q&#125;会被当成代码块而不是对象字面量。</div></pre></td></tr></table></figure>\n<p> 2、分配默认值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let &#123;a=5,b=1&#125;=&#123;a:10&#125;</div><div class=\"line\">console.log(a) //10</div><div class=\"line\">console.log(b) //1</div></pre></td></tr></table></figure>\n<p> 3、为function的参数设置默认值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function drag( &#123;radius=50, point=&#123;x:0, y:0&#125;&#125; )&#123;</div><div class=\"line\">        console.log(radius,point.x,point.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">drag(&#123;</div><div class=\"line\">    point:&#123;</div><div class=\"line\">        x:100,</div><div class=\"line\">        y:100</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)  </div><div class=\"line\">// 50,100,100</div><div class=\"line\"></div><div class=\"line\">完全使用默认值</div><div class=\"line\">drag(&#123;&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>Set中存储的值只能是唯一的，不管是基本类型的还是对象类型的。我们可以按元素插入的顺序来迭代Set。</p>\n<h4 id=\"value-equality\"><a href=\"#value-equality\" class=\"headerlink\" title=\"value equality\"></a>value equality</h4><p>对于Set来说,-0和+0是不相等的，NaN和undefined也可以存储在Set中,并且NaN==NaN,虽然在js中NaN!==NaN</p>\n<h4 id=\"常用属性和方法\"><a href=\"#常用属性和方法\" class=\"headerlink\" title=\"常用属性和方法\"></a>常用属性和方法</h4><pre><code>size : 元素的number\n\nadd(value)\n\nclear() : 清除所有元素\n\ndelete(value) ： 删除特定元素\n\nhas() : return boolean\n\nentries() ： 返回一个包含每一个元素的数组的新的迭代对象\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">let mySet=new Set([1,2,3,4])</div><div class=\"line\">for(const [key,value] of mySet.entries())&#123;</div><div class=\"line\">    //key values是一样的</div><div class=\"line\">    console.log(key) // 1,2,3,4</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n\nkeys() values() :一样，返回一个包含所有元素的可迭代对象\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const mySet=new Set([1,2,3,4,5,6,7])</div><div class=\"line\">for(let item of mySet.keys())&#123;</div><div class=\"line\">     console.log(item)</div><div class=\"line\">&#125;</div><div class=\"line\">for(let item of mySet.values())&#123;</div><div class=\"line\">    console.log(item)</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n\nSet Array之间的相互转换\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">array---&gt;set</div><div class=\"line\">const arr=[&apos;v1&apos;,&apos;v2&apos;,&apos;v3&apos;]</div><div class=\"line\">const set =new Set(arr)</div><div class=\"line\"></div><div class=\"line\"> set--&gt;array</div><div class=\"line\">const arr1=Array.from(set)</div><div class=\"line\">console.log([...set])</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p>key/value的映射,任何类型的值都可以用做key或value。注意对象只能string,symbols做key。</p>\n<h4 id=\"属性方法\"><a href=\"#属性方法\" class=\"headerlink\" title=\"属性方法\"></a>属性方法</h4><pre><code>size()  set(key, value)  get(key)  has(key)  clear() \n\ndelete(key)   entries()   keys()  values()\n\nforEach(callbackFn[, thisArg])\n\n迭代:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">myMap.forEach(function(value, key) &#123;</div><div class=\"line\">    console.log(key + &apos; = &apos; + value);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">for (var [key, value] of myMap) &#123;</div><div class=\"line\">    console.log(key + &apos; = &apos; + value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for (var key of myMap.keys()) &#123;</div><div class=\"line\">    console.log(key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> for (var value of myMap.values()) &#123;</div><div class=\"line\">    console.log(value);</div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\">for (var [key, value] of myMap.entries()) &#123;</div><div class=\"line\">    console.log(key + &apos; = &apos; + value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre>"},{"title":"react学习","date":"2017-05-11T07:48:38.000Z","_content":"\n\n\n## JSX介绍\n\nJSX是一种js的语法扩展，比较像xml，html，最终会被转化成regular js Objects。\n\n使用JSX\n```\n    var Hello = React.createClass({\n     render: function() {\n     return <div>Hello {this.props.name}</div>;\n    }\n});\nReactDOM.render(\n  <Hello name=\"World\" />,\n  document.getElementById('container')\n);\n```\n不使用JSX\n```\n  var Hello = React.createClass({\n    displayName: 'Hello',\n    render: function() {\n        return React.createElement(\"div\", null, \"Hello \", this.props.name);\n    }\n});\n\nReactDOM.render(\n  React.createElement(Hello, {name: \"World\"}),\n  document.getElementById('container')\n);\n\n```\n使用JSX，代码看起来更整洁，清晰。\n\n##使用JSX渲染html标签和react组件\n\n渲染html标签时使用小写的标签名\n渲染组件，组件名首字母大写\n\nNotes:因为JSX更接近js,react dom使用驼峰命名规范命名属性，class在JSX中用className表示，\ntabindex变成tabIndex。\n\n## JSX表示对象\n\nBabel编译JSX编译成React.createElement()形式，\n\n```\n    const element = (\n      <h1 className=\"greeting\">\n       Hello, world!\n      </h1>\n    );\n    编译成：\n    const element = React.createElement(\n      'h1',\n      {className: 'greeting'},\n      'Hello, world!'\n    );  \n    React最终会生成\n    // Note: this structure is simplified\n    const element = {\n      type: 'h1',\n      props: {\n        className: 'greeting',\n        children: 'Hello, world'\n      }\n    };\n    这样的对象，这些对象叫做“React element”。react使用这些对象来构造dom,虚拟DOM也是基于\n    这种对象计算的。\n\n```","source":"_posts/react学习.md","raw":"---\ntitle: react学习\ndate: 2017-05-11 15:48:38\ntags:  react\n---\n\n\n\n## JSX介绍\n\nJSX是一种js的语法扩展，比较像xml，html，最终会被转化成regular js Objects。\n\n使用JSX\n```\n    var Hello = React.createClass({\n     render: function() {\n     return <div>Hello {this.props.name}</div>;\n    }\n});\nReactDOM.render(\n  <Hello name=\"World\" />,\n  document.getElementById('container')\n);\n```\n不使用JSX\n```\n  var Hello = React.createClass({\n    displayName: 'Hello',\n    render: function() {\n        return React.createElement(\"div\", null, \"Hello \", this.props.name);\n    }\n});\n\nReactDOM.render(\n  React.createElement(Hello, {name: \"World\"}),\n  document.getElementById('container')\n);\n\n```\n使用JSX，代码看起来更整洁，清晰。\n\n##使用JSX渲染html标签和react组件\n\n渲染html标签时使用小写的标签名\n渲染组件，组件名首字母大写\n\nNotes:因为JSX更接近js,react dom使用驼峰命名规范命名属性，class在JSX中用className表示，\ntabindex变成tabIndex。\n\n## JSX表示对象\n\nBabel编译JSX编译成React.createElement()形式，\n\n```\n    const element = (\n      <h1 className=\"greeting\">\n       Hello, world!\n      </h1>\n    );\n    编译成：\n    const element = React.createElement(\n      'h1',\n      {className: 'greeting'},\n      'Hello, world!'\n    );  \n    React最终会生成\n    // Note: this structure is simplified\n    const element = {\n      type: 'h1',\n      props: {\n        className: 'greeting',\n        children: 'Hello, world'\n      }\n    };\n    这样的对象，这些对象叫做“React element”。react使用这些对象来构造dom,虚拟DOM也是基于\n    这种对象计算的。\n\n```","slug":"react学习","published":1,"updated":"2017-05-15T08:00:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm11000h09rter8l4si9","content":"<h2 id=\"JSX介绍\"><a href=\"#JSX介绍\" class=\"headerlink\" title=\"JSX介绍\"></a>JSX介绍</h2><p>JSX是一种js的语法扩展，比较像xml，html，最终会被转化成regular js Objects。</p>\n<p>使用JSX<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    var Hello = React.createClass(&#123;</div><div class=\"line\">     render: function() &#123;</div><div class=\"line\">     return &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;Hello name=&quot;World&quot; /&gt;,</div><div class=\"line\">  document.getElementById(&apos;container&apos;)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>不使用JSX<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">  var Hello = React.createClass(&#123;</div><div class=\"line\">    displayName: &apos;Hello&apos;,</div><div class=\"line\">    render: function() &#123;</div><div class=\"line\">        return React.createElement(&quot;div&quot;, null, &quot;Hello &quot;, this.props.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  React.createElement(Hello, &#123;name: &quot;World&quot;&#125;),</div><div class=\"line\">  document.getElementById(&apos;container&apos;)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>使用JSX，代码看起来更整洁，清晰。</p>\n<p>##使用JSX渲染html标签和react组件</p>\n<p>渲染html标签时使用小写的标签名<br>渲染组件，组件名首字母大写</p>\n<p>Notes:因为JSX更接近js,react dom使用驼峰命名规范命名属性，class在JSX中用className表示，<br>tabindex变成tabIndex。</p>\n<h2 id=\"JSX表示对象\"><a href=\"#JSX表示对象\" class=\"headerlink\" title=\"JSX表示对象\"></a>JSX表示对象</h2><p>Babel编译JSX编译成React.createElement()形式，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">const element = (</div><div class=\"line\">  &lt;h1 className=&quot;greeting&quot;&gt;</div><div class=\"line\">   Hello, world!</div><div class=\"line\">  &lt;/h1&gt;</div><div class=\"line\">);</div><div class=\"line\">编译成：</div><div class=\"line\">const element = React.createElement(</div><div class=\"line\">  &apos;h1&apos;,</div><div class=\"line\">  &#123;className: &apos;greeting&apos;&#125;,</div><div class=\"line\">  &apos;Hello, world!&apos;</div><div class=\"line\">);  </div><div class=\"line\">React最终会生成</div><div class=\"line\">// Note: this structure is simplified</div><div class=\"line\">const element = &#123;</div><div class=\"line\">  type: &apos;h1&apos;,</div><div class=\"line\">  props: &#123;</div><div class=\"line\">    className: &apos;greeting&apos;,</div><div class=\"line\">    children: &apos;Hello, world&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">这样的对象，这些对象叫做“React element”。react使用这些对象来构造dom,虚拟DOM也是基于</div><div class=\"line\">这种对象计算的。</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JSX介绍\"><a href=\"#JSX介绍\" class=\"headerlink\" title=\"JSX介绍\"></a>JSX介绍</h2><p>JSX是一种js的语法扩展，比较像xml，html，最终会被转化成regular js Objects。</p>\n<p>使用JSX<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    var Hello = React.createClass(&#123;</div><div class=\"line\">     render: function() &#123;</div><div class=\"line\">     return &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;Hello name=&quot;World&quot; /&gt;,</div><div class=\"line\">  document.getElementById(&apos;container&apos;)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>不使用JSX<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">  var Hello = React.createClass(&#123;</div><div class=\"line\">    displayName: &apos;Hello&apos;,</div><div class=\"line\">    render: function() &#123;</div><div class=\"line\">        return React.createElement(&quot;div&quot;, null, &quot;Hello &quot;, this.props.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  React.createElement(Hello, &#123;name: &quot;World&quot;&#125;),</div><div class=\"line\">  document.getElementById(&apos;container&apos;)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>使用JSX，代码看起来更整洁，清晰。</p>\n<p>##使用JSX渲染html标签和react组件</p>\n<p>渲染html标签时使用小写的标签名<br>渲染组件，组件名首字母大写</p>\n<p>Notes:因为JSX更接近js,react dom使用驼峰命名规范命名属性，class在JSX中用className表示，<br>tabindex变成tabIndex。</p>\n<h2 id=\"JSX表示对象\"><a href=\"#JSX表示对象\" class=\"headerlink\" title=\"JSX表示对象\"></a>JSX表示对象</h2><p>Babel编译JSX编译成React.createElement()形式，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">const element = (</div><div class=\"line\">  &lt;h1 className=&quot;greeting&quot;&gt;</div><div class=\"line\">   Hello, world!</div><div class=\"line\">  &lt;/h1&gt;</div><div class=\"line\">);</div><div class=\"line\">编译成：</div><div class=\"line\">const element = React.createElement(</div><div class=\"line\">  &apos;h1&apos;,</div><div class=\"line\">  &#123;className: &apos;greeting&apos;&#125;,</div><div class=\"line\">  &apos;Hello, world!&apos;</div><div class=\"line\">);  </div><div class=\"line\">React最终会生成</div><div class=\"line\">// Note: this structure is simplified</div><div class=\"line\">const element = &#123;</div><div class=\"line\">  type: &apos;h1&apos;,</div><div class=\"line\">  props: &#123;</div><div class=\"line\">    className: &apos;greeting&apos;,</div><div class=\"line\">    children: &apos;Hello, world&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">这样的对象，这些对象叫做“React element”。react使用这些对象来构造dom,虚拟DOM也是基于</div><div class=\"line\">这种对象计算的。</div></pre></td></tr></table></figure>"},{"title":"es6学习笔记(一)","date":"2016-09-02T08:06:22.000Z","_content":"\n- [箭头函数](#箭头函数)\n    - [new.target](#new-target)\n- [class](#class)\n\n## 箭头函数\n\n箭头函数相对于函数表达式是一种更简洁的语法，箭头函数没有自己的 *this, arguments, super, new.target*,并且 **不能被用做构造函数**。\n\n 1. 不绑定this\n\n    ```\n\tclass Test {\n\n\t\tconstructor() {\n\t\t\tthis.age = 3\n\t\t\tthis.arr = [1, 2, 3, 4, 5]\n\t\t}\n\n\t\tfilterArr() {\n            //箭头函数，this指的就是class Test的一个实例对象\n\t\t\t return this.arr.filter((item) => {\n\t\t\t  \treturn item !== this.age\n\t\t\t })\n\n             //普通函数,this是undefined\n\t\t\treturn this.arr.filter(function (item) {\n\t\t\t\tconsole.log(this)\n\t\t\t\treturn item !== this.age\n\t\t\t})\n\t\t}\n\n\t}\n\n\tconst t = new Test()\n\tconsole.log(t.filterArr())\n\n    ```\n\n    **invoked through call,apply**\n    Since this is not bound in arrow functions, the methods call() or apply() can only pass in parameters. this is ignored\n\n 2. 不绑定arguments\n\n    箭头函数不绑定arguments，所以函数内的arguments指向的是外层函数的arguments。\n\n    ```\n        function foo() {\n            var f = (i) => arguments[0] + i; // foo's implicit arguments binding\n            return f(2);\n        }\n        foo(1); // 3\n    ```\n\n    箭头函数获取参数的替代方式\n\n    ```\n        function foo() { \n            var f = (...args) => args[0]; \n            return f(2); \n        }\n    ```\n\n\n#### new.target\n\n通过new.target可以判断一个function或constructor是否通过new关键字调用。对于实例来说，new.target指向构造函数，普通函数的new.target是undefined。\n\n使用场景\n```\n    function Foo() {\n        if (!new.target) throw 'Foo() must be called with new';\n        console.log('Foo instantiated with new');\n    }\n\n    Foo(); // throws \"Foo() must be called with new\"\n    new Foo(); // logs \"Foo instantiated with new\"\n    \n```\n\n## class","source":"_posts/es6学习笔记-一.md","raw":"---\ntitle: es6学习笔记(一)\ndate: 2016-09-02 16:06:22\ntags: es6\n---\n\n- [箭头函数](#箭头函数)\n    - [new.target](#new-target)\n- [class](#class)\n\n## 箭头函数\n\n箭头函数相对于函数表达式是一种更简洁的语法，箭头函数没有自己的 *this, arguments, super, new.target*,并且 **不能被用做构造函数**。\n\n 1. 不绑定this\n\n    ```\n\tclass Test {\n\n\t\tconstructor() {\n\t\t\tthis.age = 3\n\t\t\tthis.arr = [1, 2, 3, 4, 5]\n\t\t}\n\n\t\tfilterArr() {\n            //箭头函数，this指的就是class Test的一个实例对象\n\t\t\t return this.arr.filter((item) => {\n\t\t\t  \treturn item !== this.age\n\t\t\t })\n\n             //普通函数,this是undefined\n\t\t\treturn this.arr.filter(function (item) {\n\t\t\t\tconsole.log(this)\n\t\t\t\treturn item !== this.age\n\t\t\t})\n\t\t}\n\n\t}\n\n\tconst t = new Test()\n\tconsole.log(t.filterArr())\n\n    ```\n\n    **invoked through call,apply**\n    Since this is not bound in arrow functions, the methods call() or apply() can only pass in parameters. this is ignored\n\n 2. 不绑定arguments\n\n    箭头函数不绑定arguments，所以函数内的arguments指向的是外层函数的arguments。\n\n    ```\n        function foo() {\n            var f = (i) => arguments[0] + i; // foo's implicit arguments binding\n            return f(2);\n        }\n        foo(1); // 3\n    ```\n\n    箭头函数获取参数的替代方式\n\n    ```\n        function foo() { \n            var f = (...args) => args[0]; \n            return f(2); \n        }\n    ```\n\n\n#### new.target\n\n通过new.target可以判断一个function或constructor是否通过new关键字调用。对于实例来说，new.target指向构造函数，普通函数的new.target是undefined。\n\n使用场景\n```\n    function Foo() {\n        if (!new.target) throw 'Foo() must be called with new';\n        console.log('Foo instantiated with new');\n    }\n\n    Foo(); // throws \"Foo() must be called with new\"\n    new Foo(); // logs \"Foo instantiated with new\"\n    \n```\n\n## class","slug":"es6学习笔记-一","published":1,"updated":"2017-05-03T10:15:09.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm14000k09rtq7y1mcus","content":"<ul>\n<li><a href=\"#箭头函数\">箭头函数</a><ul>\n<li><a href=\"#new-target\">new.target</a></li>\n</ul>\n</li>\n<li><a href=\"#class\">class</a></li>\n</ul>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>箭头函数相对于函数表达式是一种更简洁的语法，箭头函数没有自己的 <em>this, arguments, super, new.target</em>,并且 <strong>不能被用做构造函数</strong>。</p>\n<ol>\n<li><p>不绑定this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Test &#123;</div><div class=\"line\"></div><div class=\"line\">\tconstructor() &#123;</div><div class=\"line\">\t\tthis.age = 3</div><div class=\"line\">\t\tthis.arr = [1, 2, 3, 4, 5]</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfilterArr() &#123;</div><div class=\"line\">           //箭头函数，this指的就是class Test的一个实例对象</div><div class=\"line\">\t\t return this.arr.filter((item) =&gt; &#123;</div><div class=\"line\">\t\t  \treturn item !== this.age</div><div class=\"line\">\t\t &#125;)</div><div class=\"line\"></div><div class=\"line\">            //普通函数,this是undefined</div><div class=\"line\">\t\treturn this.arr.filter(function (item) &#123;</div><div class=\"line\">\t\t\tconsole.log(this)</div><div class=\"line\">\t\t\treturn item !== this.age</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const t = new Test()</div><div class=\"line\">console.log(t.filterArr())</div></pre></td></tr></table></figure>\n<p><strong>invoked through call,apply</strong><br>Since this is not bound in arrow functions, the methods call() or apply() can only pass in parameters. this is ignored</p>\n</li>\n<li><p>不绑定arguments</p>\n<p>箭头函数不绑定arguments，所以函数内的arguments指向的是外层函数的arguments。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">    var f = (i) =&gt; arguments[0] + i; // foo&apos;s implicit arguments binding</div><div class=\"line\">    return f(2);</div><div class=\"line\">&#125;</div><div class=\"line\">foo(1); // 3</div></pre></td></tr></table></figure>\n<p>箭头函数获取参数的替代方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123; </div><div class=\"line\">    var f = (...args) =&gt; args[0]; </div><div class=\"line\">    return f(2); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h4><p>通过new.target可以判断一个function或constructor是否通过new关键字调用。对于实例来说，new.target指向构造函数，普通函数的new.target是undefined。</p>\n<p>使用场景<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Foo() &#123;</div><div class=\"line\">    if (!new.target) throw &apos;Foo() must be called with new&apos;;</div><div class=\"line\">    console.log(&apos;Foo instantiated with new&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Foo(); // throws &quot;Foo() must be called with new&quot;</div><div class=\"line\">new Foo(); // logs &quot;Foo instantiated with new&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#箭头函数\">箭头函数</a><ul>\n<li><a href=\"#new-target\">new.target</a></li>\n</ul>\n</li>\n<li><a href=\"#class\">class</a></li>\n</ul>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>箭头函数相对于函数表达式是一种更简洁的语法，箭头函数没有自己的 <em>this, arguments, super, new.target</em>,并且 <strong>不能被用做构造函数</strong>。</p>\n<ol>\n<li><p>不绑定this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Test &#123;</div><div class=\"line\"></div><div class=\"line\">\tconstructor() &#123;</div><div class=\"line\">\t\tthis.age = 3</div><div class=\"line\">\t\tthis.arr = [1, 2, 3, 4, 5]</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfilterArr() &#123;</div><div class=\"line\">           //箭头函数，this指的就是class Test的一个实例对象</div><div class=\"line\">\t\t return this.arr.filter((item) =&gt; &#123;</div><div class=\"line\">\t\t  \treturn item !== this.age</div><div class=\"line\">\t\t &#125;)</div><div class=\"line\"></div><div class=\"line\">            //普通函数,this是undefined</div><div class=\"line\">\t\treturn this.arr.filter(function (item) &#123;</div><div class=\"line\">\t\t\tconsole.log(this)</div><div class=\"line\">\t\t\treturn item !== this.age</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const t = new Test()</div><div class=\"line\">console.log(t.filterArr())</div></pre></td></tr></table></figure>\n<p><strong>invoked through call,apply</strong><br>Since this is not bound in arrow functions, the methods call() or apply() can only pass in parameters. this is ignored</p>\n</li>\n<li><p>不绑定arguments</p>\n<p>箭头函数不绑定arguments，所以函数内的arguments指向的是外层函数的arguments。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">    var f = (i) =&gt; arguments[0] + i; // foo&apos;s implicit arguments binding</div><div class=\"line\">    return f(2);</div><div class=\"line\">&#125;</div><div class=\"line\">foo(1); // 3</div></pre></td></tr></table></figure>\n<p>箭头函数获取参数的替代方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123; </div><div class=\"line\">    var f = (...args) =&gt; args[0]; </div><div class=\"line\">    return f(2); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h4><p>通过new.target可以判断一个function或constructor是否通过new关键字调用。对于实例来说，new.target指向构造函数，普通函数的new.target是undefined。</p>\n<p>使用场景<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Foo() &#123;</div><div class=\"line\">    if (!new.target) throw &apos;Foo() must be called with new&apos;;</div><div class=\"line\">    console.log(&apos;Foo instantiated with new&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Foo(); // throws &quot;Foo() must be called with new&quot;</div><div class=\"line\">new Foo(); // logs &quot;Foo instantiated with new&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2>"},{"title":"原生js获取位置、寬高属性值","date":"2016-08-28T10:40:50.000Z","thumbnail":"/css/images/compare_width.png","_content":"\n![](/css/images/compare_width.png)\n\n### Element.getBoundingClientRect()\n\n返回元素的大小及其相对于视口的位置\n\n> rectObject = object.getBoundingClientRect();\n返回值是一个 DOMRect 对象,这个对象是由该元素的 getClientRects() 方法返回的一组矩形的集合。\nDOMRect 对象包含了一组用于描述边框的只读属性——left、top、right和bottom，单位为像素。\n除了 width 和 height 外的属性都是相对于视口的左上角位置而言的。\n\n\n### Element.getClientRects()\n\n*返回一个指向客户端中每一个盒子的边界矩形的矩形集合*\n\n\n### clientHeight、offsetHeight、clientTop、scrollTop\n\n>clientHeight | clientWidth  clientHeight = css height + css padding\noffsetHeight | offsetWidth  offsetWidth = css width + padding +border +  vertical scrollbar   \n\noffsetTop | offsetLeft\n **returns the distance of the current element relative to the top of the offsetParent node**\n\n\n\nclientTop | clientLeft\n\n**the top border、left border of an element in pixels**\n\nElement.scrollTop | Element.scrollLeft\n\n**The Element.scrollTop property gets or sets the number of pixels that \nthe content of an element is scrolled upward**\n\n---\n\n*注意scrollWidth scrollHeight*\n\nElement.scrollHeight\n\n**The Element.scrollHeight read-only property is a measurement of the height of an element's content, \nincluding content not visible on the screen due to overflow.** \n \nElement.scrollWidth\n\n**The Element.scrollWidth read–only property returns either the width in pixels \nof the content of an element or the width of the element itself, whichever is greater. \nIf the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), \nthe scrollWidth is larger than the clientWidth.**\n\n---\n\n### window scrollX | scrollY | screenX | screenY | innerWidth | innerHeight\n\n>innerWidth、innerHeight //window视图的寬高\n screenX、screenY  //浏览器左边、上边分别距离屏幕左、上的距离\n scrollX、scrollY  //document被滚动的距离 window.pageYOffset == window.scrollY\n\n\n**For cross-browser compatibility, use window.pageYOffset instead of window.scrollY** \n跨浏览器使用:\nwindow.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop   \n    \n","source":"_posts/原生js获取位置、寬高属性值.md","raw":"---\ntitle: 原生js获取位置、寬高属性值\ndate: 2016-08-28 18:40:50\ntags: javascript\nthumbnail: /css/images/compare_width.png\n---\n\n![](/css/images/compare_width.png)\n\n### Element.getBoundingClientRect()\n\n返回元素的大小及其相对于视口的位置\n\n> rectObject = object.getBoundingClientRect();\n返回值是一个 DOMRect 对象,这个对象是由该元素的 getClientRects() 方法返回的一组矩形的集合。\nDOMRect 对象包含了一组用于描述边框的只读属性——left、top、right和bottom，单位为像素。\n除了 width 和 height 外的属性都是相对于视口的左上角位置而言的。\n\n\n### Element.getClientRects()\n\n*返回一个指向客户端中每一个盒子的边界矩形的矩形集合*\n\n\n### clientHeight、offsetHeight、clientTop、scrollTop\n\n>clientHeight | clientWidth  clientHeight = css height + css padding\noffsetHeight | offsetWidth  offsetWidth = css width + padding +border +  vertical scrollbar   \n\noffsetTop | offsetLeft\n **returns the distance of the current element relative to the top of the offsetParent node**\n\n\n\nclientTop | clientLeft\n\n**the top border、left border of an element in pixels**\n\nElement.scrollTop | Element.scrollLeft\n\n**The Element.scrollTop property gets or sets the number of pixels that \nthe content of an element is scrolled upward**\n\n---\n\n*注意scrollWidth scrollHeight*\n\nElement.scrollHeight\n\n**The Element.scrollHeight read-only property is a measurement of the height of an element's content, \nincluding content not visible on the screen due to overflow.** \n \nElement.scrollWidth\n\n**The Element.scrollWidth read–only property returns either the width in pixels \nof the content of an element or the width of the element itself, whichever is greater. \nIf the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), \nthe scrollWidth is larger than the clientWidth.**\n\n---\n\n### window scrollX | scrollY | screenX | screenY | innerWidth | innerHeight\n\n>innerWidth、innerHeight //window视图的寬高\n screenX、screenY  //浏览器左边、上边分别距离屏幕左、上的距离\n scrollX、scrollY  //document被滚动的距离 window.pageYOffset == window.scrollY\n\n\n**For cross-browser compatibility, use window.pageYOffset instead of window.scrollY** \n跨浏览器使用:\nwindow.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop   \n    \n","slug":"原生js获取位置、寬高属性值","published":1,"updated":"2017-05-03T09:07:25.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm16000m09rttfl5dqdq","content":"<p><img src=\"/css/images/compare_width.png\" alt=\"\"></p>\n<h3 id=\"Element-getBoundingClientRect\"><a href=\"#Element-getBoundingClientRect\" class=\"headerlink\" title=\"Element.getBoundingClientRect()\"></a>Element.getBoundingClientRect()</h3><p>返回元素的大小及其相对于视口的位置</p>\n<blockquote>\n<p>rectObject = object.getBoundingClientRect();<br>返回值是一个 DOMRect 对象,这个对象是由该元素的 getClientRects() 方法返回的一组矩形的集合。<br>DOMRect 对象包含了一组用于描述边框的只读属性——left、top、right和bottom，单位为像素。<br>除了 width 和 height 外的属性都是相对于视口的左上角位置而言的。</p>\n</blockquote>\n<h3 id=\"Element-getClientRects\"><a href=\"#Element-getClientRects\" class=\"headerlink\" title=\"Element.getClientRects()\"></a>Element.getClientRects()</h3><p><em>返回一个指向客户端中每一个盒子的边界矩形的矩形集合</em></p>\n<h3 id=\"clientHeight、offsetHeight、clientTop、scrollTop\"><a href=\"#clientHeight、offsetHeight、clientTop、scrollTop\" class=\"headerlink\" title=\"clientHeight、offsetHeight、clientTop、scrollTop\"></a>clientHeight、offsetHeight、clientTop、scrollTop</h3><blockquote>\n<p>clientHeight | clientWidth  clientHeight = css height + css padding<br>offsetHeight | offsetWidth  offsetWidth = css width + padding +border +  vertical scrollbar   </p>\n</blockquote>\n<p>offsetTop | offsetLeft<br> <strong>returns the distance of the current element relative to the top of the offsetParent node</strong></p>\n<p>clientTop | clientLeft</p>\n<p><strong>the top border、left border of an element in pixels</strong></p>\n<p>Element.scrollTop | Element.scrollLeft</p>\n<p><strong>The Element.scrollTop property gets or sets the number of pixels that<br>the content of an element is scrolled upward</strong></p>\n<hr>\n<p><em>注意scrollWidth scrollHeight</em></p>\n<p>Element.scrollHeight</p>\n<p><strong>The Element.scrollHeight read-only property is a measurement of the height of an element’s content,<br>including content not visible on the screen due to overflow.</strong> </p>\n<p>Element.scrollWidth</p>\n<p><strong>The Element.scrollWidth read–only property returns either the width in pixels<br>of the content of an element or the width of the element itself, whichever is greater.<br>If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content),<br>the scrollWidth is larger than the clientWidth.</strong></p>\n<hr>\n<h3 id=\"window-scrollX-scrollY-screenX-screenY-innerWidth-innerHeight\"><a href=\"#window-scrollX-scrollY-screenX-screenY-innerWidth-innerHeight\" class=\"headerlink\" title=\"window scrollX | scrollY | screenX | screenY | innerWidth | innerHeight\"></a>window scrollX | scrollY | screenX | screenY | innerWidth | innerHeight</h3><blockquote>\n<p>innerWidth、innerHeight //window视图的寬高<br> screenX、screenY  //浏览器左边、上边分别距离屏幕左、上的距离<br> scrollX、scrollY  //document被滚动的距离 window.pageYOffset == window.scrollY</p>\n</blockquote>\n<p><strong>For cross-browser compatibility, use window.pageYOffset instead of window.scrollY</strong><br>跨浏览器使用:<br>window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop   </p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/css/images/compare_width.png\" alt=\"\"></p>\n<h3 id=\"Element-getBoundingClientRect\"><a href=\"#Element-getBoundingClientRect\" class=\"headerlink\" title=\"Element.getBoundingClientRect()\"></a>Element.getBoundingClientRect()</h3><p>返回元素的大小及其相对于视口的位置</p>\n<blockquote>\n<p>rectObject = object.getBoundingClientRect();<br>返回值是一个 DOMRect 对象,这个对象是由该元素的 getClientRects() 方法返回的一组矩形的集合。<br>DOMRect 对象包含了一组用于描述边框的只读属性——left、top、right和bottom，单位为像素。<br>除了 width 和 height 外的属性都是相对于视口的左上角位置而言的。</p>\n</blockquote>\n<h3 id=\"Element-getClientRects\"><a href=\"#Element-getClientRects\" class=\"headerlink\" title=\"Element.getClientRects()\"></a>Element.getClientRects()</h3><p><em>返回一个指向客户端中每一个盒子的边界矩形的矩形集合</em></p>\n<h3 id=\"clientHeight、offsetHeight、clientTop、scrollTop\"><a href=\"#clientHeight、offsetHeight、clientTop、scrollTop\" class=\"headerlink\" title=\"clientHeight、offsetHeight、clientTop、scrollTop\"></a>clientHeight、offsetHeight、clientTop、scrollTop</h3><blockquote>\n<p>clientHeight | clientWidth  clientHeight = css height + css padding<br>offsetHeight | offsetWidth  offsetWidth = css width + padding +border +  vertical scrollbar   </p>\n</blockquote>\n<p>offsetTop | offsetLeft<br> <strong>returns the distance of the current element relative to the top of the offsetParent node</strong></p>\n<p>clientTop | clientLeft</p>\n<p><strong>the top border、left border of an element in pixels</strong></p>\n<p>Element.scrollTop | Element.scrollLeft</p>\n<p><strong>The Element.scrollTop property gets or sets the number of pixels that<br>the content of an element is scrolled upward</strong></p>\n<hr>\n<p><em>注意scrollWidth scrollHeight</em></p>\n<p>Element.scrollHeight</p>\n<p><strong>The Element.scrollHeight read-only property is a measurement of the height of an element’s content,<br>including content not visible on the screen due to overflow.</strong> </p>\n<p>Element.scrollWidth</p>\n<p><strong>The Element.scrollWidth read–only property returns either the width in pixels<br>of the content of an element or the width of the element itself, whichever is greater.<br>If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content),<br>the scrollWidth is larger than the clientWidth.</strong></p>\n<hr>\n<h3 id=\"window-scrollX-scrollY-screenX-screenY-innerWidth-innerHeight\"><a href=\"#window-scrollX-scrollY-screenX-screenY-innerWidth-innerHeight\" class=\"headerlink\" title=\"window scrollX | scrollY | screenX | screenY | innerWidth | innerHeight\"></a>window scrollX | scrollY | screenX | screenY | innerWidth | innerHeight</h3><blockquote>\n<p>innerWidth、innerHeight //window视图的寬高<br> screenX、screenY  //浏览器左边、上边分别距离屏幕左、上的距离<br> scrollX、scrollY  //document被滚动的距离 window.pageYOffset == window.scrollY</p>\n</blockquote>\n<p><strong>For cross-browser compatibility, use window.pageYOffset instead of window.scrollY</strong><br>跨浏览器使用:<br>window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop   </p>\n"},{"title":"ubuntu","date":"2016-05-03T09:24:48.000Z","_content":"\n## 常用命令：\n    \n    `\n      ls\n      ls -l\n      cp \n      mv\n      tar -zxvf 解压 tar.gz文件\n      rm -rf //删除文件、文件夹\n      rm -R\n      \n      //apt-get  install purge remove 安装软件\n      dpkg -i -L -r -P 查看文件安装 \n      \n    `\n\n## 生成ssh key\n  \n   `\n   \n      apt-get install ssh\n      ssh-keygen -t rsa -C 'xxx@email.com'\n      复制id_rsa.pub到github个人ssh\n      git clone github项目使用ssh方式\n      \n      ssh远程登录\n      ssh username@remoteHost\n   `\n\n## 文件传输\n\n   、\n     本地传输到远端\n      scp XXX username@remoteHost:/xxxx\n      scp -r XXX/ username@remoteHost:/xxxx\n      \n      远端传输到本地\n      scp username@remoteHost:/XXXX  xxxx\n   、\n\n## vim\n\nnormal/insert模式\ni进入insert\nesc退出insert\n：q ：q1 :wq（保存退出）\n\n*h j k l * 移动鼠标\n\n1. h  左\n\n2. l  右\n\n3. j 下\n\n4. K 上\n\n\n*：q enter 强制退出*\n\n*x 删除*\n\n*i insert*\n\n*a append*\n\n*ESC 退出到normal模式* \n\n\n\n## 软件安装\n\n安装 JDK\n\n    ```\n        编辑oracle jdk相关的profile（subl命令将会启动Sublime文本编辑器）\n        sudo subl /etc/profile.d/oraclejdk.sh\n\n        #将以下内容拷贝进入此文件\n        export J2SDKDIR=/usr/lib/jvm/jdk1.8.0_66\n        export J2REDIR=/usr/lib/jvm/jdk1.8.0_66/jre\n        export PATH=$PATH:/usr/lib/jvm/jdk1.8.0_66/bin:/usr/lib/jvm/jdk1.8.0_66/db/bin:/usr/lib/jvm/jdk1.8.0_66/jre/bin\n        export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_66\n        export DERBY_HOME=/usr/lib/jvm/jdk1.8.0_66/db\n\n        #重启命令行终端，或运行以下的source命令以激活上面的profile\n        source /etc/profile.d/oraclejdk.sh\n    ```\n\n安装tomcat\n      \n      ```\n        打开启动的脚本文件\n        sudo vi ./bin/startup.sh\n        \n        添加jdk和jre环境变量\n        JAVA_HOME=/usr/java/jdk1.8.0_20\n        JRE_HOME=$JAVA_HOME/jre\n        PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME\n        CLASSPATH=.:$JRE_HOME/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n        TOMCAT_HOME=/opt/apache-tomcat-8.0.12\n      ```\n\n使用nvm安装nodejs\n \n    ```\n        安装nvm\n\n     git clone https://github.com/creationix/nvm.git\n     配置终端启动时自动执行:\n         在 ~/.bashrc, ~/.bash_profile, ~/.profile, 或者 ~/.zshrc 文件添加以下命令:\n         source ~/git/nvm/nvm.sh\n    \n     nvm安装完毕后，可以使用help看下命令列表，使用install来安装，使用use来激活node。\n\n      nvm help\n      nvm install v4.4.5\n      nvm use v4.4.5 \n\n      激活特定版本的node\n      nvm alias default v4.4.5\n\n     bower不能工作问题解决\n     bower install -g -allow-root\n\n     使用阿里仓库\n     alias cnpm='npm --registry=https://registry.npm.taobao.org'\n\n    ```\n\n\n\n安装chrome\n\n    ```\n        1: Download Google Chrome \n\n      wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n\n      有时，会出现某依赖未安装的问题，只要执行以下命令补齐即可\n      sudo apt-get install -f\n\n      2.Install .deb file\n      sudo dpkg -i google-chrome-stable_current_amd64.deb\n    ```\n\n\n安装nginx\n\n    ```\n        apt-get install nginx\n    \n        nginx.conf位置 /etc/nginx/nginx.conf\n    \n        vim /sites-available/default\n      \n        路径没问题时403问题:\n         ngindex.conf  user root;\n      \n        service nginx start/stop\n    ```\n\n\n\n## gnome3 安装\n\n\t```\n\t\tsudo add-apt-repository ppa:gnome3-team/gnome3\n \n\t\tsudo apt-get update\n \n\t\tsudo apt-get dist-upgrade\n \n\t\tsudo apt-get install gnome-themes-standard ubuntu-desktop gnome-shell\n\n\t\t删除\n\t\tsudo apt-get install ppa-purge\n \n\t\tsudo ppa-purge ppa:gnome3-team/gnome3\n\t```\n\n## ubuntu-tweak\n\n```\n\tsudo add-apt-repository ppa:tualatrix/ppa\n\tsudo apt-get update\n\tsudo apt-get install ubuntu-tweak\n```","source":"_posts/ubuntu.md","raw":"---\ntitle: ubuntu\ndate: 2016-05-03 17:24:48\ntags: ubuntu\n---\n\n## 常用命令：\n    \n    `\n      ls\n      ls -l\n      cp \n      mv\n      tar -zxvf 解压 tar.gz文件\n      rm -rf //删除文件、文件夹\n      rm -R\n      \n      //apt-get  install purge remove 安装软件\n      dpkg -i -L -r -P 查看文件安装 \n      \n    `\n\n## 生成ssh key\n  \n   `\n   \n      apt-get install ssh\n      ssh-keygen -t rsa -C 'xxx@email.com'\n      复制id_rsa.pub到github个人ssh\n      git clone github项目使用ssh方式\n      \n      ssh远程登录\n      ssh username@remoteHost\n   `\n\n## 文件传输\n\n   、\n     本地传输到远端\n      scp XXX username@remoteHost:/xxxx\n      scp -r XXX/ username@remoteHost:/xxxx\n      \n      远端传输到本地\n      scp username@remoteHost:/XXXX  xxxx\n   、\n\n## vim\n\nnormal/insert模式\ni进入insert\nesc退出insert\n：q ：q1 :wq（保存退出）\n\n*h j k l * 移动鼠标\n\n1. h  左\n\n2. l  右\n\n3. j 下\n\n4. K 上\n\n\n*：q enter 强制退出*\n\n*x 删除*\n\n*i insert*\n\n*a append*\n\n*ESC 退出到normal模式* \n\n\n\n## 软件安装\n\n安装 JDK\n\n    ```\n        编辑oracle jdk相关的profile（subl命令将会启动Sublime文本编辑器）\n        sudo subl /etc/profile.d/oraclejdk.sh\n\n        #将以下内容拷贝进入此文件\n        export J2SDKDIR=/usr/lib/jvm/jdk1.8.0_66\n        export J2REDIR=/usr/lib/jvm/jdk1.8.0_66/jre\n        export PATH=$PATH:/usr/lib/jvm/jdk1.8.0_66/bin:/usr/lib/jvm/jdk1.8.0_66/db/bin:/usr/lib/jvm/jdk1.8.0_66/jre/bin\n        export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_66\n        export DERBY_HOME=/usr/lib/jvm/jdk1.8.0_66/db\n\n        #重启命令行终端，或运行以下的source命令以激活上面的profile\n        source /etc/profile.d/oraclejdk.sh\n    ```\n\n安装tomcat\n      \n      ```\n        打开启动的脚本文件\n        sudo vi ./bin/startup.sh\n        \n        添加jdk和jre环境变量\n        JAVA_HOME=/usr/java/jdk1.8.0_20\n        JRE_HOME=$JAVA_HOME/jre\n        PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME\n        CLASSPATH=.:$JRE_HOME/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n        TOMCAT_HOME=/opt/apache-tomcat-8.0.12\n      ```\n\n使用nvm安装nodejs\n \n    ```\n        安装nvm\n\n     git clone https://github.com/creationix/nvm.git\n     配置终端启动时自动执行:\n         在 ~/.bashrc, ~/.bash_profile, ~/.profile, 或者 ~/.zshrc 文件添加以下命令:\n         source ~/git/nvm/nvm.sh\n    \n     nvm安装完毕后，可以使用help看下命令列表，使用install来安装，使用use来激活node。\n\n      nvm help\n      nvm install v4.4.5\n      nvm use v4.4.5 \n\n      激活特定版本的node\n      nvm alias default v4.4.5\n\n     bower不能工作问题解决\n     bower install -g -allow-root\n\n     使用阿里仓库\n     alias cnpm='npm --registry=https://registry.npm.taobao.org'\n\n    ```\n\n\n\n安装chrome\n\n    ```\n        1: Download Google Chrome \n\n      wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n\n      有时，会出现某依赖未安装的问题，只要执行以下命令补齐即可\n      sudo apt-get install -f\n\n      2.Install .deb file\n      sudo dpkg -i google-chrome-stable_current_amd64.deb\n    ```\n\n\n安装nginx\n\n    ```\n        apt-get install nginx\n    \n        nginx.conf位置 /etc/nginx/nginx.conf\n    \n        vim /sites-available/default\n      \n        路径没问题时403问题:\n         ngindex.conf  user root;\n      \n        service nginx start/stop\n    ```\n\n\n\n## gnome3 安装\n\n\t```\n\t\tsudo add-apt-repository ppa:gnome3-team/gnome3\n \n\t\tsudo apt-get update\n \n\t\tsudo apt-get dist-upgrade\n \n\t\tsudo apt-get install gnome-themes-standard ubuntu-desktop gnome-shell\n\n\t\t删除\n\t\tsudo apt-get install ppa-purge\n \n\t\tsudo ppa-purge ppa:gnome3-team/gnome3\n\t```\n\n## ubuntu-tweak\n\n```\n\tsudo add-apt-repository ppa:tualatrix/ppa\n\tsudo apt-get update\n\tsudo apt-get install ubuntu-tweak\n```","slug":"ubuntu","published":1,"updated":"2017-05-04T04:18:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm1b000o09rtkwq9ldzn","content":"<h2 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h2><pre><code>`\n  ls\n  ls -l\n  cp \n  mv\n  tar -zxvf 解压 tar.gz文件\n  rm -rf //删除文件、文件夹\n  rm -R\n\n  //apt-get  install purge remove 安装软件\n  dpkg -i -L -r -P 查看文件安装 \n\n`\n</code></pre><h2 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h2><p>   `</p>\n<pre><code>apt-get install ssh\nssh-keygen -t rsa -C &apos;xxx@email.com&apos;\n复制id_rsa.pub到github个人ssh\ngit clone github项目使用ssh方式\n\nssh远程登录\nssh username@remoteHost\n</code></pre><p>   `</p>\n<h2 id=\"文件传输\"><a href=\"#文件传输\" class=\"headerlink\" title=\"文件传输\"></a>文件传输</h2><p>   、<br>     本地传输到远端<br>      scp XXX username@remoteHost:/xxxx<br>      scp -r XXX/ username@remoteHost:/xxxx</p>\n<pre><code>远端传输到本地\nscp username@remoteHost:/XXXX  xxxx\n</code></pre><p>   、</p>\n<h2 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h2><p>normal/insert模式<br>i进入insert<br>esc退出insert<br>：q ：q1 :wq（保存退出）</p>\n<p><em>h j k l </em> 移动鼠标</p>\n<ol>\n<li><p>h  左</p>\n</li>\n<li><p>l  右</p>\n</li>\n<li><p>j 下</p>\n</li>\n<li><p>K 上</p>\n</li>\n</ol>\n<p><em>：q enter 强制退出</em></p>\n<p><em>x 删除</em></p>\n<p><em>i insert</em></p>\n<p><em>a append</em></p>\n<p><em>ESC 退出到normal模式</em> </p>\n<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><p>安装 JDK</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">编辑oracle jdk相关的profile（subl命令将会启动Sublime文本编辑器）</div><div class=\"line\">sudo subl /etc/profile.d/oraclejdk.sh</div><div class=\"line\"></div><div class=\"line\">#将以下内容拷贝进入此文件</div><div class=\"line\">export J2SDKDIR=/usr/lib/jvm/jdk1.8.0_66</div><div class=\"line\">export J2REDIR=/usr/lib/jvm/jdk1.8.0_66/jre</div><div class=\"line\">export PATH=$PATH:/usr/lib/jvm/jdk1.8.0_66/bin:/usr/lib/jvm/jdk1.8.0_66/db/bin:/usr/lib/jvm/jdk1.8.0_66/jre/bin</div><div class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_66</div><div class=\"line\">export DERBY_HOME=/usr/lib/jvm/jdk1.8.0_66/db</div><div class=\"line\"></div><div class=\"line\">#重启命令行终端，或运行以下的source命令以激活上面的profile</div><div class=\"line\">source /etc/profile.d/oraclejdk.sh</div></pre></td></tr></table></figure>\n</code></pre><p>安装tomcat</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">打开启动的脚本文件</div><div class=\"line\">sudo vi ./bin/startup.sh</div><div class=\"line\"></div><div class=\"line\">添加jdk和jre环境变量</div><div class=\"line\">JAVA_HOME=/usr/java/jdk1.8.0_20</div><div class=\"line\">JRE_HOME=$JAVA_HOME/jre</div><div class=\"line\">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME</div><div class=\"line\">CLASSPATH=.:$JRE_HOME/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class=\"line\">TOMCAT_HOME=/opt/apache-tomcat-8.0.12</div></pre></td></tr></table></figure>\n</code></pre><p>使用nvm安装nodejs</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">   安装nvm</div><div class=\"line\"></div><div class=\"line\">git clone https://github.com/creationix/nvm.git</div><div class=\"line\">配置终端启动时自动执行:</div><div class=\"line\">    在 ~/.bashrc, ~/.bash_profile, ~/.profile, 或者 ~/.zshrc 文件添加以下命令:</div><div class=\"line\">    source ~/git/nvm/nvm.sh</div><div class=\"line\">    </div><div class=\"line\">nvm安装完毕后，可以使用help看下命令列表，使用install来安装，使用use来激活node。</div><div class=\"line\"></div><div class=\"line\"> nvm help</div><div class=\"line\"> nvm install v4.4.5</div><div class=\"line\"> nvm use v4.4.5 </div><div class=\"line\"></div><div class=\"line\"> 激活特定版本的node</div><div class=\"line\"> nvm alias default v4.4.5</div><div class=\"line\"></div><div class=\"line\">bower不能工作问题解决</div><div class=\"line\">bower install -g -allow-root</div><div class=\"line\"></div><div class=\"line\">使用阿里仓库</div><div class=\"line\">alias cnpm=&apos;npm --registry=https://registry.npm.taobao.org&apos;</div></pre></td></tr></table></figure>\n</code></pre><p>安装chrome</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  1: Download Google Chrome </div><div class=\"line\"></div><div class=\"line\">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</div><div class=\"line\"></div><div class=\"line\">有时，会出现某依赖未安装的问题，只要执行以下命令补齐即可</div><div class=\"line\">sudo apt-get install -f</div><div class=\"line\"></div><div class=\"line\">2.Install .deb file</div><div class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</div></pre></td></tr></table></figure>\n</code></pre><p>安装nginx</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install nginx</div><div class=\"line\">    </div><div class=\"line\">nginx.conf位置 /etc/nginx/nginx.conf</div><div class=\"line\">    </div><div class=\"line\">vim /sites-available/default</div><div class=\"line\">      </div><div class=\"line\">路径没问题时403问题:</div><div class=\"line\"> ngindex.conf  user root;</div><div class=\"line\">      </div><div class=\"line\">service nginx start/stop</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"gnome3-安装\"><a href=\"#gnome3-安装\" class=\"headerlink\" title=\"gnome3 安装\"></a>gnome3 安装</h2><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:gnome3-team/gnome3</div><div class=\"line\"> </div><div class=\"line\">sudo apt-get update</div><div class=\"line\"> </div><div class=\"line\">sudo apt-get dist-upgrade</div><div class=\"line\"> </div><div class=\"line\">sudo apt-get install gnome-themes-standard ubuntu-desktop gnome-shell</div><div class=\"line\"></div><div class=\"line\">删除</div><div class=\"line\">sudo apt-get install ppa-purge</div><div class=\"line\"> </div><div class=\"line\">sudo ppa-purge ppa:gnome3-team/gnome3</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"ubuntu-tweak\"><a href=\"#ubuntu-tweak\" class=\"headerlink\" title=\"ubuntu-tweak\"></a>ubuntu-tweak</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:tualatrix/ppa</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install ubuntu-tweak</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h2><pre><code>`\n  ls\n  ls -l\n  cp \n  mv\n  tar -zxvf 解压 tar.gz文件\n  rm -rf //删除文件、文件夹\n  rm -R\n\n  //apt-get  install purge remove 安装软件\n  dpkg -i -L -r -P 查看文件安装 \n\n`\n</code></pre><h2 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h2><p>   `</p>\n<pre><code>apt-get install ssh\nssh-keygen -t rsa -C &apos;xxx@email.com&apos;\n复制id_rsa.pub到github个人ssh\ngit clone github项目使用ssh方式\n\nssh远程登录\nssh username@remoteHost\n</code></pre><p>   `</p>\n<h2 id=\"文件传输\"><a href=\"#文件传输\" class=\"headerlink\" title=\"文件传输\"></a>文件传输</h2><p>   、<br>     本地传输到远端<br>      scp XXX username@remoteHost:/xxxx<br>      scp -r XXX/ username@remoteHost:/xxxx</p>\n<pre><code>远端传输到本地\nscp username@remoteHost:/XXXX  xxxx\n</code></pre><p>   、</p>\n<h2 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h2><p>normal/insert模式<br>i进入insert<br>esc退出insert<br>：q ：q1 :wq（保存退出）</p>\n<p><em>h j k l </em> 移动鼠标</p>\n<ol>\n<li><p>h  左</p>\n</li>\n<li><p>l  右</p>\n</li>\n<li><p>j 下</p>\n</li>\n<li><p>K 上</p>\n</li>\n</ol>\n<p><em>：q enter 强制退出</em></p>\n<p><em>x 删除</em></p>\n<p><em>i insert</em></p>\n<p><em>a append</em></p>\n<p><em>ESC 退出到normal模式</em> </p>\n<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><p>安装 JDK</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">编辑oracle jdk相关的profile（subl命令将会启动Sublime文本编辑器）</div><div class=\"line\">sudo subl /etc/profile.d/oraclejdk.sh</div><div class=\"line\"></div><div class=\"line\">#将以下内容拷贝进入此文件</div><div class=\"line\">export J2SDKDIR=/usr/lib/jvm/jdk1.8.0_66</div><div class=\"line\">export J2REDIR=/usr/lib/jvm/jdk1.8.0_66/jre</div><div class=\"line\">export PATH=$PATH:/usr/lib/jvm/jdk1.8.0_66/bin:/usr/lib/jvm/jdk1.8.0_66/db/bin:/usr/lib/jvm/jdk1.8.0_66/jre/bin</div><div class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_66</div><div class=\"line\">export DERBY_HOME=/usr/lib/jvm/jdk1.8.0_66/db</div><div class=\"line\"></div><div class=\"line\">#重启命令行终端，或运行以下的source命令以激活上面的profile</div><div class=\"line\">source /etc/profile.d/oraclejdk.sh</div></pre></td></tr></table></figure>\n</code></pre><p>安装tomcat</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">打开启动的脚本文件</div><div class=\"line\">sudo vi ./bin/startup.sh</div><div class=\"line\"></div><div class=\"line\">添加jdk和jre环境变量</div><div class=\"line\">JAVA_HOME=/usr/java/jdk1.8.0_20</div><div class=\"line\">JRE_HOME=$JAVA_HOME/jre</div><div class=\"line\">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME</div><div class=\"line\">CLASSPATH=.:$JRE_HOME/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class=\"line\">TOMCAT_HOME=/opt/apache-tomcat-8.0.12</div></pre></td></tr></table></figure>\n</code></pre><p>使用nvm安装nodejs</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">   安装nvm</div><div class=\"line\"></div><div class=\"line\">git clone https://github.com/creationix/nvm.git</div><div class=\"line\">配置终端启动时自动执行:</div><div class=\"line\">    在 ~/.bashrc, ~/.bash_profile, ~/.profile, 或者 ~/.zshrc 文件添加以下命令:</div><div class=\"line\">    source ~/git/nvm/nvm.sh</div><div class=\"line\">    </div><div class=\"line\">nvm安装完毕后，可以使用help看下命令列表，使用install来安装，使用use来激活node。</div><div class=\"line\"></div><div class=\"line\"> nvm help</div><div class=\"line\"> nvm install v4.4.5</div><div class=\"line\"> nvm use v4.4.5 </div><div class=\"line\"></div><div class=\"line\"> 激活特定版本的node</div><div class=\"line\"> nvm alias default v4.4.5</div><div class=\"line\"></div><div class=\"line\">bower不能工作问题解决</div><div class=\"line\">bower install -g -allow-root</div><div class=\"line\"></div><div class=\"line\">使用阿里仓库</div><div class=\"line\">alias cnpm=&apos;npm --registry=https://registry.npm.taobao.org&apos;</div></pre></td></tr></table></figure>\n</code></pre><p>安装chrome</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  1: Download Google Chrome </div><div class=\"line\"></div><div class=\"line\">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</div><div class=\"line\"></div><div class=\"line\">有时，会出现某依赖未安装的问题，只要执行以下命令补齐即可</div><div class=\"line\">sudo apt-get install -f</div><div class=\"line\"></div><div class=\"line\">2.Install .deb file</div><div class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</div></pre></td></tr></table></figure>\n</code></pre><p>安装nginx</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install nginx</div><div class=\"line\">    </div><div class=\"line\">nginx.conf位置 /etc/nginx/nginx.conf</div><div class=\"line\">    </div><div class=\"line\">vim /sites-available/default</div><div class=\"line\">      </div><div class=\"line\">路径没问题时403问题:</div><div class=\"line\"> ngindex.conf  user root;</div><div class=\"line\">      </div><div class=\"line\">service nginx start/stop</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"gnome3-安装\"><a href=\"#gnome3-安装\" class=\"headerlink\" title=\"gnome3 安装\"></a>gnome3 安装</h2><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:gnome3-team/gnome3</div><div class=\"line\"> </div><div class=\"line\">sudo apt-get update</div><div class=\"line\"> </div><div class=\"line\">sudo apt-get dist-upgrade</div><div class=\"line\"> </div><div class=\"line\">sudo apt-get install gnome-themes-standard ubuntu-desktop gnome-shell</div><div class=\"line\"></div><div class=\"line\">删除</div><div class=\"line\">sudo apt-get install ppa-purge</div><div class=\"line\"> </div><div class=\"line\">sudo ppa-purge ppa:gnome3-team/gnome3</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"ubuntu-tweak\"><a href=\"#ubuntu-tweak\" class=\"headerlink\" title=\"ubuntu-tweak\"></a>ubuntu-tweak</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:tualatrix/ppa</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install ubuntu-tweak</div></pre></td></tr></table></figure>"},{"title":"mongodb笔记","date":"2016-04-06T09:26:04.000Z","_content":"\n[mongoDB nodejs Driver API](http://mongodb.github.io/node-mongodb-native/2.2/quick-start/)\n[mongodb客户端  robomongo](https://robomongo.org/)\n\n**ubuntu下**：\n默认启动程序 /usr/lib/mongod\n配置文件  /etc/mongodb.conf 修改端口，开启身份认证等\ndbpath  /var/lib/mongodb\ndblog   /var/log/mongodb/mongodb.log\n       \n解决Mongod error | exception in initAndListen std::exception: \nlocale::facet::_S_create_c_locale name not valid\n\nexport LC_ALL=C \n\n- [启动mongod](#启动mongod)\n- [身份认证](#身份认证)\n- [数据备份](#数据备份)\n- [数据类型](#数据类型)\n- [node操作mongodb](#node操作mongodb)\n    - [修改](#修改)\n    - [查询](#查询)\n- [游标](#游标)\n- [聚合](#聚合)\n\n## 启动mongod\n每个mongodb实例要有自己的数据存储目录，mongod启动时，\n会在数据目录中创建mongod.lock文件，防止其他mongod进程使用此目录\nmongod --dbpath // 默认数据目录 /data/db\nmongod --port \nmongod --fork //以守护进程的方式运行mongodb,创建服务端进程\nmongod --logpath  --logappend //日志输出路径\nmongod --bind_ip //绑定的ip\nmongod --config\n     \n## 身份认证\n首先在非认证前提下，在数据库中创建用户\nuse mydb\ndb.addUser('admin','admin);\n//开启认证\nmongod --port=3308 --auth \n\nmongo访问开启认证的数据库     \nmongo localhost:3307/mydb -u admin -p admin     \n     \n\n## 数据备份\nmongodump 运行时备份的方法，产生的备份不一定是服务器数据的实时快照\n\n```\n    mongodump -d yf_blogs -o C:\\data\\backup \n     mongodump -h 192.168.20.81:3307 -d yf_blog -o C:\\data\\backup\n```\n     \nmongonrestore  将mongodump备份的数据恢复到指定数据库中  \n\n```\nmongonrestore -h 192.168.20.81:3307 -d yf_blogs123 --drop C:\\data\\backup\\yf_blogs\n```\n     \n\n\n## 数据类型\n\n1. null\n2. boolean\n3. 数值 shell默认使用64位浮点型数值{'x':3.14}\n4. 字符串\n5. 日期{‘x’:new Date()}\n6. 正则 {‘x’:/foobar/i/}\n7. 数组 {‘x’:[]}\n8. 内嵌文档 {‘x’:[]}\n9. 对象ID 是一个12字节的ID，是文档的唯一标示\n\n\n## node操作mongodb\n\n- #### 修改\n\n    1. 修改器\n\n    *$inc*  用于数字 增加减少整数、长整数、双精度浮点数\n     \n     ```\n      db.user.find()\n      // { \"_id\" : ObjectId(\"578c3efee9bbab4f5d008fb0\"), \"name\" : \"ww\", \"tel\" :         \n          \"15727\", \"age\" : 23, \"fav\" : \"js\" }\n        db.user.update({\"name\":\"ww\"},{\"$inc\":{\"age\":1}});\n     ```\n\n\n    *$set $unset* 增加、修改、删除键\n\n    ```\n        db.user.update({\"name\":\"ww\"},{\"$set\":{\"fav\":\"tttttt\"}})\n\n        db.user.update({\"name\":\"ww\"},{\"unset\":{\"fav\":1}})\n    ```\n\n    **upset**\n\n    ```\n        db.blog.update({},{},true) //不存在则创建，存在则更新,第三个参数为true\n        db.attachment.update({'attId':'123'},{'$set':{'attName':'123.png'}},true)\n    ```\n\n    2. 数组修改器\n\n    *$push $ne $addToSet*\n      \n      ```\n        db.blog.update({'title':'test'},{'$push':{'comments':{'author':\"\",\"content\":\"\"}}})\n\t   $push会重复添加\n\t   $ne $addToSet 只会添加数组中没有的新元素\n\t   \n\t   $addToSet和$each组合使用，可以添加多个不同的值\n\t   db.test.update({'name':'ww'},{'$addToSet':{'email':{'$each':['155@qq.com','155@163.com']}}})\n      ```\n\t  *删除*\n      ```\n        $pop  从数组任一端删除元素 {'$pop':{key:1}}//从尾删除 key:-1 //从头删除\n        $pull  删除指定元素 **会将匹配的元素全都删掉**\n      ```\n\n      3. 操作文档下的数组中的指定item项的内容\n\n      ```\n        db_blog.updateOne({\n            '_id':DB.generatorObjectId(params.id),\n            'comments._id':DB.generatorObjectId(params.commentId)\n        },{\n            \"$push\":{\"comments.$.apply\":data}\n        },function(err,doc){\n            db.close();\n            console.log(doc)\n            cb(err,doc)\n        })\n      ```\n\n\n- #### 查询\n\n    指定返回的键\n    \n    ```\n         通过find的第二个参数控制\n        db.user.find({},{'username':1,'password':1,'age':0})\n        0 1 控制\n    ```\n\n    查询条件 $lt  $lte $gt $gte  $ne不相等\n\n    ```\n        db.users.find({'age':{\n          '$gte':18,\n          '$lte'；30\n       }})\n      //查询18<= age <=30的user\n    ```\n\n    OR查询($in $nin  $or)\n\n    ```\n        $in 用来查询 *一个键* 的多个值\n        $or 用来完成 *多个键值* 的任意给定值\n    \n        db.user.find({'age':{$in:[18,19,20]}});\n         //查询age为18，19或20的\n        db.user.find({'$or':[{\"name\":\"luyun\"},{\"age\":20}]});\n        //查询name为luyun的或age为20的\n    ```\n\n    $not 是元条件句，可以用在任何其他条件上\n\n    ```\n        db.user.find( {\"id_num\":{\"$mod\":[5,1]}} )\n        db.user.find( {\"id_num\":{ \"$not\":{ \"$mod\":[5,1] } } } )\n    ```\n\n\n    $exists  //键值是否存在\n\n    ```\n        db.user.find({\"age\":{\"$exists\":true}})\n    ```\n\n\n    查询数组\n\n    ```\n    $all 通过多个元素匹配数组\n    db.food.find({'fruit':{'$all':['apple','banana']}})\n\n    $size\n    $slice //指定返回数组的条数\n    db.blog,posts.findOne({'title':'123'},{'comments':{'$slice':10/-10} })\n    //查询内嵌数组从第n个开始，查询m个\n     db_blog.find(\n                {\n                    '_id': DB.generatorObjectId(params.id)\n                },\n                {\n                    comments: {$slice: [n, m]},\n                }).toArray(function(){})\n    ```\n\n\n\n\n##  游标\n\n游标对象的方法\n\n     limit\n     skip\n     sort({\"username\":1,\"age\":-1})//按username升序，age降序排序\n     \n     \n\n## 聚合\n \n  ```\n    *count*\n    db.users.count() //查询数量\n    \n    *distinct*\n    \n    *group*\n    db.runCommand({\"group\":{\n      'ns':'posts',//要进行分组的集合\n      'key':'day',  //指定文档分组依据的键\n      'initial':{'time':0}, //每一组reduce调用的初始时间\n                           //每一组的所有成员都会使用这个累加器，所以改变会保留住\n      '$reduce':function(doc,prev){\n              //当前文档，累加器文档（每一组都有一个独立的累加器）\n      },\n      'condition':{'day':{'$get':'2016/08/08'}}\n      'finalize':function(){} //作用于result中的每一个item,对结果进行修剪\n      '$keyf':function(x){ //将函数作为键使用\n        return x.category.toLowerCase()\n      }\n    }})\n    \n    *MapReduce*\n  ```","source":"_posts/mongodb笔记.md","raw":"---\ntitle: mongodb笔记\ndate: 2016-04-06 17:26:04\ntags: mongodb  \n---\n\n[mongoDB nodejs Driver API](http://mongodb.github.io/node-mongodb-native/2.2/quick-start/)\n[mongodb客户端  robomongo](https://robomongo.org/)\n\n**ubuntu下**：\n默认启动程序 /usr/lib/mongod\n配置文件  /etc/mongodb.conf 修改端口，开启身份认证等\ndbpath  /var/lib/mongodb\ndblog   /var/log/mongodb/mongodb.log\n       \n解决Mongod error | exception in initAndListen std::exception: \nlocale::facet::_S_create_c_locale name not valid\n\nexport LC_ALL=C \n\n- [启动mongod](#启动mongod)\n- [身份认证](#身份认证)\n- [数据备份](#数据备份)\n- [数据类型](#数据类型)\n- [node操作mongodb](#node操作mongodb)\n    - [修改](#修改)\n    - [查询](#查询)\n- [游标](#游标)\n- [聚合](#聚合)\n\n## 启动mongod\n每个mongodb实例要有自己的数据存储目录，mongod启动时，\n会在数据目录中创建mongod.lock文件，防止其他mongod进程使用此目录\nmongod --dbpath // 默认数据目录 /data/db\nmongod --port \nmongod --fork //以守护进程的方式运行mongodb,创建服务端进程\nmongod --logpath  --logappend //日志输出路径\nmongod --bind_ip //绑定的ip\nmongod --config\n     \n## 身份认证\n首先在非认证前提下，在数据库中创建用户\nuse mydb\ndb.addUser('admin','admin);\n//开启认证\nmongod --port=3308 --auth \n\nmongo访问开启认证的数据库     \nmongo localhost:3307/mydb -u admin -p admin     \n     \n\n## 数据备份\nmongodump 运行时备份的方法，产生的备份不一定是服务器数据的实时快照\n\n```\n    mongodump -d yf_blogs -o C:\\data\\backup \n     mongodump -h 192.168.20.81:3307 -d yf_blog -o C:\\data\\backup\n```\n     \nmongonrestore  将mongodump备份的数据恢复到指定数据库中  \n\n```\nmongonrestore -h 192.168.20.81:3307 -d yf_blogs123 --drop C:\\data\\backup\\yf_blogs\n```\n     \n\n\n## 数据类型\n\n1. null\n2. boolean\n3. 数值 shell默认使用64位浮点型数值{'x':3.14}\n4. 字符串\n5. 日期{‘x’:new Date()}\n6. 正则 {‘x’:/foobar/i/}\n7. 数组 {‘x’:[]}\n8. 内嵌文档 {‘x’:[]}\n9. 对象ID 是一个12字节的ID，是文档的唯一标示\n\n\n## node操作mongodb\n\n- #### 修改\n\n    1. 修改器\n\n    *$inc*  用于数字 增加减少整数、长整数、双精度浮点数\n     \n     ```\n      db.user.find()\n      // { \"_id\" : ObjectId(\"578c3efee9bbab4f5d008fb0\"), \"name\" : \"ww\", \"tel\" :         \n          \"15727\", \"age\" : 23, \"fav\" : \"js\" }\n        db.user.update({\"name\":\"ww\"},{\"$inc\":{\"age\":1}});\n     ```\n\n\n    *$set $unset* 增加、修改、删除键\n\n    ```\n        db.user.update({\"name\":\"ww\"},{\"$set\":{\"fav\":\"tttttt\"}})\n\n        db.user.update({\"name\":\"ww\"},{\"unset\":{\"fav\":1}})\n    ```\n\n    **upset**\n\n    ```\n        db.blog.update({},{},true) //不存在则创建，存在则更新,第三个参数为true\n        db.attachment.update({'attId':'123'},{'$set':{'attName':'123.png'}},true)\n    ```\n\n    2. 数组修改器\n\n    *$push $ne $addToSet*\n      \n      ```\n        db.blog.update({'title':'test'},{'$push':{'comments':{'author':\"\",\"content\":\"\"}}})\n\t   $push会重复添加\n\t   $ne $addToSet 只会添加数组中没有的新元素\n\t   \n\t   $addToSet和$each组合使用，可以添加多个不同的值\n\t   db.test.update({'name':'ww'},{'$addToSet':{'email':{'$each':['155@qq.com','155@163.com']}}})\n      ```\n\t  *删除*\n      ```\n        $pop  从数组任一端删除元素 {'$pop':{key:1}}//从尾删除 key:-1 //从头删除\n        $pull  删除指定元素 **会将匹配的元素全都删掉**\n      ```\n\n      3. 操作文档下的数组中的指定item项的内容\n\n      ```\n        db_blog.updateOne({\n            '_id':DB.generatorObjectId(params.id),\n            'comments._id':DB.generatorObjectId(params.commentId)\n        },{\n            \"$push\":{\"comments.$.apply\":data}\n        },function(err,doc){\n            db.close();\n            console.log(doc)\n            cb(err,doc)\n        })\n      ```\n\n\n- #### 查询\n\n    指定返回的键\n    \n    ```\n         通过find的第二个参数控制\n        db.user.find({},{'username':1,'password':1,'age':0})\n        0 1 控制\n    ```\n\n    查询条件 $lt  $lte $gt $gte  $ne不相等\n\n    ```\n        db.users.find({'age':{\n          '$gte':18,\n          '$lte'；30\n       }})\n      //查询18<= age <=30的user\n    ```\n\n    OR查询($in $nin  $or)\n\n    ```\n        $in 用来查询 *一个键* 的多个值\n        $or 用来完成 *多个键值* 的任意给定值\n    \n        db.user.find({'age':{$in:[18,19,20]}});\n         //查询age为18，19或20的\n        db.user.find({'$or':[{\"name\":\"luyun\"},{\"age\":20}]});\n        //查询name为luyun的或age为20的\n    ```\n\n    $not 是元条件句，可以用在任何其他条件上\n\n    ```\n        db.user.find( {\"id_num\":{\"$mod\":[5,1]}} )\n        db.user.find( {\"id_num\":{ \"$not\":{ \"$mod\":[5,1] } } } )\n    ```\n\n\n    $exists  //键值是否存在\n\n    ```\n        db.user.find({\"age\":{\"$exists\":true}})\n    ```\n\n\n    查询数组\n\n    ```\n    $all 通过多个元素匹配数组\n    db.food.find({'fruit':{'$all':['apple','banana']}})\n\n    $size\n    $slice //指定返回数组的条数\n    db.blog,posts.findOne({'title':'123'},{'comments':{'$slice':10/-10} })\n    //查询内嵌数组从第n个开始，查询m个\n     db_blog.find(\n                {\n                    '_id': DB.generatorObjectId(params.id)\n                },\n                {\n                    comments: {$slice: [n, m]},\n                }).toArray(function(){})\n    ```\n\n\n\n\n##  游标\n\n游标对象的方法\n\n     limit\n     skip\n     sort({\"username\":1,\"age\":-1})//按username升序，age降序排序\n     \n     \n\n## 聚合\n \n  ```\n    *count*\n    db.users.count() //查询数量\n    \n    *distinct*\n    \n    *group*\n    db.runCommand({\"group\":{\n      'ns':'posts',//要进行分组的集合\n      'key':'day',  //指定文档分组依据的键\n      'initial':{'time':0}, //每一组reduce调用的初始时间\n                           //每一组的所有成员都会使用这个累加器，所以改变会保留住\n      '$reduce':function(doc,prev){\n              //当前文档，累加器文档（每一组都有一个独立的累加器）\n      },\n      'condition':{'day':{'$get':'2016/08/08'}}\n      'finalize':function(){} //作用于result中的每一个item,对结果进行修剪\n      '$keyf':function(x){ //将函数作为键使用\n        return x.category.toLowerCase()\n      }\n    }})\n    \n    *MapReduce*\n  ```","slug":"mongodb笔记","published":1,"updated":"2017-05-03T10:24:12.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32upm1e000q09rtwn4c5fld","content":"<p><a href=\"http://mongodb.github.io/node-mongodb-native/2.2/quick-start/\" target=\"_blank\" rel=\"external\">mongoDB nodejs Driver API</a><br><a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"external\">mongodb客户端  robomongo</a></p>\n<p><strong>ubuntu下</strong>：<br>默认启动程序 /usr/lib/mongod<br>配置文件  /etc/mongodb.conf 修改端口，开启身份认证等<br>dbpath  /var/lib/mongodb<br>dblog   /var/log/mongodb/mongodb.log</p>\n<p>解决Mongod error | exception in initAndListen std::exception:<br>locale::facet::_S_create_c_locale name not valid</p>\n<p>export LC_ALL=C </p>\n<ul>\n<li><a href=\"#启动mongod\">启动mongod</a></li>\n<li><a href=\"#身份认证\">身份认证</a></li>\n<li><a href=\"#数据备份\">数据备份</a></li>\n<li><a href=\"#数据类型\">数据类型</a></li>\n<li><a href=\"#node操作mongodb\">node操作mongodb</a><ul>\n<li><a href=\"#修改\">修改</a></li>\n<li><a href=\"#查询\">查询</a></li>\n</ul>\n</li>\n<li><a href=\"#游标\">游标</a></li>\n<li><a href=\"#聚合\">聚合</a></li>\n</ul>\n<h2 id=\"启动mongod\"><a href=\"#启动mongod\" class=\"headerlink\" title=\"启动mongod\"></a>启动mongod</h2><p>每个mongodb实例要有自己的数据存储目录，mongod启动时，<br>会在数据目录中创建mongod.lock文件，防止其他mongod进程使用此目录<br>mongod –dbpath // 默认数据目录 /data/db<br>mongod –port<br>mongod –fork //以守护进程的方式运行mongodb,创建服务端进程<br>mongod –logpath  –logappend //日志输出路径<br>mongod –bind_ip //绑定的ip<br>mongod –config</p>\n<h2 id=\"身份认证\"><a href=\"#身份认证\" class=\"headerlink\" title=\"身份认证\"></a>身份认证</h2><p>首先在非认证前提下，在数据库中创建用户<br>use mydb<br>db.addUser(‘admin’,’admin);<br>//开启认证<br>mongod –port=3308 –auth </p>\n<p>mongo访问开启认证的数据库<br>mongo localhost:3307/mydb -u admin -p admin     </p>\n<h2 id=\"数据备份\"><a href=\"#数据备份\" class=\"headerlink\" title=\"数据备份\"></a>数据备份</h2><p>mongodump 运行时备份的方法，产生的备份不一定是服务器数据的实时快照</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongodump -d yf_blogs -o C:\\data\\backup </div><div class=\"line\"> mongodump -h 192.168.20.81:3307 -d yf_blog -o C:\\data\\backup</div></pre></td></tr></table></figure>\n<p>mongonrestore  将mongodump备份的数据恢复到指定数据库中  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongonrestore -h 192.168.20.81:3307 -d yf_blogs123 --drop C:\\data\\backup\\yf_blogs</div></pre></td></tr></table></figure>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ol>\n<li>null</li>\n<li>boolean</li>\n<li>数值 shell默认使用64位浮点型数值{‘x’:3.14}</li>\n<li>字符串</li>\n<li>日期{‘x’:new Date()}</li>\n<li>正则 {‘x’:/foobar/i/}</li>\n<li>数组 {‘x’:[]}</li>\n<li>内嵌文档 {‘x’:[]}</li>\n<li>对象ID 是一个12字节的ID，是文档的唯一标示</li>\n</ol>\n<h2 id=\"node操作mongodb\"><a href=\"#node操作mongodb\" class=\"headerlink\" title=\"node操作mongodb\"></a>node操作mongodb</h2><ul>\n<li><h4 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h4><ol>\n<li><p>修改器</p>\n<p><em>$inc</em>  用于数字 增加减少整数、长整数、双精度浮点数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find()</div><div class=\"line\">// &#123; &quot;_id&quot; : ObjectId(&quot;578c3efee9bbab4f5d008fb0&quot;), &quot;name&quot; : &quot;ww&quot;, &quot;tel&quot; :         </div><div class=\"line\">    &quot;15727&quot;, &quot;age&quot; : 23, &quot;fav&quot; : &quot;js&quot; &#125;</div><div class=\"line\">  db.user.update(&#123;&quot;name&quot;:&quot;ww&quot;&#125;,&#123;&quot;$inc&quot;:&#123;&quot;age&quot;:1&#125;&#125;);</div></pre></td></tr></table></figure>\n<p><em>$set $unset</em> 增加、修改、删除键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;&quot;name&quot;:&quot;ww&quot;&#125;,&#123;&quot;$set&quot;:&#123;&quot;fav&quot;:&quot;tttttt&quot;&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\">db.user.update(&#123;&quot;name&quot;:&quot;ww&quot;&#125;,&#123;&quot;unset&quot;:&#123;&quot;fav&quot;:1&#125;&#125;)</div></pre></td></tr></table></figure>\n<p><strong>upset</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.blog.update(&#123;&#125;,&#123;&#125;,true) //不存在则创建，存在则更新,第三个参数为true</div><div class=\"line\">db.attachment.update(&#123;&apos;attId&apos;:&apos;123&apos;&#125;,&#123;&apos;$set&apos;:&#123;&apos;attName&apos;:&apos;123.png&apos;&#125;&#125;,true)</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组修改器</p>\n<p><em>$push $ne $addToSet</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">    db.blog.update(&#123;&apos;title&apos;:&apos;test&apos;&#125;,&#123;&apos;$push&apos;:&#123;&apos;comments&apos;:&#123;&apos;author&apos;:&quot;&quot;,&quot;content&quot;:&quot;&quot;&#125;&#125;&#125;)</div><div class=\"line\">$push会重复添加</div><div class=\"line\">$ne $addToSet 只会添加数组中没有的新元素</div><div class=\"line\"></div><div class=\"line\">$addToSet和$each组合使用，可以添加多个不同的值</div><div class=\"line\">db.test.update(&#123;&apos;name&apos;:&apos;ww&apos;&#125;,&#123;&apos;$addToSet&apos;:&#123;&apos;email&apos;:&#123;&apos;$each&apos;:[&apos;155@qq.com&apos;,&apos;155@163.com&apos;]&#125;&#125;&#125;)</div></pre></td></tr></table></figure>\n<p><em>删除</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$pop  从数组任一端删除元素 &#123;&apos;$pop&apos;:&#123;key:1&#125;&#125;//从尾删除 key:-1 //从头删除</div><div class=\"line\">$pull  删除指定元素 **会将匹配的元素全都删掉**</div></pre></td></tr></table></figure>\n<ol>\n<li>操作文档下的数组中的指定item项的内容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db_blog.updateOne(&#123;</div><div class=\"line\">    &apos;_id&apos;:DB.generatorObjectId(params.id),</div><div class=\"line\">    &apos;comments._id&apos;:DB.generatorObjectId(params.commentId)</div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">    &quot;$push&quot;:&#123;&quot;comments.$.apply&quot;:data&#125;</div><div class=\"line\">&#125;,function(err,doc)&#123;</div><div class=\"line\">    db.close();</div><div class=\"line\">    console.log(doc)</div><div class=\"line\">    cb(err,doc)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>  指定返回的键</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> 通过find的第二个参数控制</div><div class=\"line\">db.user.find(&#123;&#125;,&#123;&apos;username&apos;:1,&apos;password&apos;:1,&apos;age&apos;:0&#125;)</div><div class=\"line\">0 1 控制</div></pre></td></tr></table></figure>\n<p>  查询条件 $lt  $lte $gt $gte  $ne不相等</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">  db.users.find(&#123;&apos;age&apos;:&#123;</div><div class=\"line\">    &apos;$gte&apos;:18,</div><div class=\"line\">    &apos;$lte&apos;；30</div><div class=\"line\"> &#125;&#125;)</div><div class=\"line\">//查询18&lt;= age &lt;=30的user</div></pre></td></tr></table></figure>\n<p>  OR查询($in $nin  $or)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$in 用来查询 *一个键* 的多个值</div><div class=\"line\">$or 用来完成 *多个键值* 的任意给定值</div><div class=\"line\">    </div><div class=\"line\">db.user.find(&#123;&apos;age&apos;:&#123;$in:[18,19,20]&#125;&#125;);</div><div class=\"line\"> //查询age为18，19或20的</div><div class=\"line\">db.user.find(&#123;&apos;$or&apos;:[&#123;&quot;name&quot;:&quot;luyun&quot;&#125;,&#123;&quot;age&quot;:20&#125;]&#125;);</div><div class=\"line\">//查询name为luyun的或age为20的</div></pre></td></tr></table></figure>\n<p>  $not 是元条件句，可以用在任何其他条件上</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find( &#123;&quot;id_num&quot;:&#123;&quot;$mod&quot;:[5,1]&#125;&#125; )</div><div class=\"line\">db.user.find( &#123;&quot;id_num&quot;:&#123; &quot;$not&quot;:&#123; &quot;$mod&quot;:[5,1] &#125; &#125; &#125; )</div></pre></td></tr></table></figure>\n<p>  $exists  //键值是否存在</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;&quot;age&quot;:&#123;&quot;$exists&quot;:true&#125;&#125;)</div></pre></td></tr></table></figure>\n<p>  查询数组</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$all 通过多个元素匹配数组</div><div class=\"line\">db.food.find(&#123;&apos;fruit&apos;:&#123;&apos;$all&apos;:[&apos;apple&apos;,&apos;banana&apos;]&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\">$size</div><div class=\"line\">$slice //指定返回数组的条数</div><div class=\"line\">db.blog,posts.findOne(&#123;&apos;title&apos;:&apos;123&apos;&#125;,&#123;&apos;comments&apos;:&#123;&apos;$slice&apos;:10/-10&#125; &#125;)</div><div class=\"line\">//查询内嵌数组从第n个开始，查询m个</div><div class=\"line\"> db_blog.find(</div><div class=\"line\">            &#123;</div><div class=\"line\">                &apos;_id&apos;: DB.generatorObjectId(params.id)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                comments: &#123;$slice: [n, m]&#125;,</div><div class=\"line\">            &#125;).toArray(function()&#123;&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"游标\"><a href=\"#游标\" class=\"headerlink\" title=\"游标\"></a>游标</h2><p>游标对象的方法</p>\n<pre><code>limit\nskip\nsort({&quot;username&quot;:1,&quot;age&quot;:-1})//按username升序，age降序排序\n</code></pre><h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">*count*</div><div class=\"line\">db.users.count() //查询数量</div><div class=\"line\"></div><div class=\"line\">*distinct*</div><div class=\"line\"></div><div class=\"line\">*group*</div><div class=\"line\">db.runCommand(&#123;&quot;group&quot;:&#123;</div><div class=\"line\">  &apos;ns&apos;:&apos;posts&apos;,//要进行分组的集合</div><div class=\"line\">  &apos;key&apos;:&apos;day&apos;,  //指定文档分组依据的键</div><div class=\"line\">  &apos;initial&apos;:&#123;&apos;time&apos;:0&#125;, //每一组reduce调用的初始时间</div><div class=\"line\">                       //每一组的所有成员都会使用这个累加器，所以改变会保留住</div><div class=\"line\">  &apos;$reduce&apos;:function(doc,prev)&#123;</div><div class=\"line\">          //当前文档，累加器文档（每一组都有一个独立的累加器）</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &apos;condition&apos;:&#123;&apos;day&apos;:&#123;&apos;$get&apos;:&apos;2016/08/08&apos;&#125;&#125;</div><div class=\"line\">  &apos;finalize&apos;:function()&#123;&#125; //作用于result中的每一个item,对结果进行修剪</div><div class=\"line\">  &apos;$keyf&apos;:function(x)&#123; //将函数作为键使用</div><div class=\"line\">    return x.category.toLowerCase()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\">*MapReduce*</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://mongodb.github.io/node-mongodb-native/2.2/quick-start/\">mongoDB nodejs Driver API</a><br><a href=\"https://robomongo.org/\">mongodb客户端  robomongo</a></p>\n<p><strong>ubuntu下</strong>：<br>默认启动程序 /usr/lib/mongod<br>配置文件  /etc/mongodb.conf 修改端口，开启身份认证等<br>dbpath  /var/lib/mongodb<br>dblog   /var/log/mongodb/mongodb.log</p>\n<p>解决Mongod error | exception in initAndListen std::exception:<br>locale::facet::_S_create_c_locale name not valid</p>\n<p>export LC_ALL=C </p>\n<ul>\n<li><a href=\"#启动mongod\">启动mongod</a></li>\n<li><a href=\"#身份认证\">身份认证</a></li>\n<li><a href=\"#数据备份\">数据备份</a></li>\n<li><a href=\"#数据类型\">数据类型</a></li>\n<li><a href=\"#node操作mongodb\">node操作mongodb</a><ul>\n<li><a href=\"#修改\">修改</a></li>\n<li><a href=\"#查询\">查询</a></li>\n</ul>\n</li>\n<li><a href=\"#游标\">游标</a></li>\n<li><a href=\"#聚合\">聚合</a></li>\n</ul>\n<h2 id=\"启动mongod\"><a href=\"#启动mongod\" class=\"headerlink\" title=\"启动mongod\"></a>启动mongod</h2><p>每个mongodb实例要有自己的数据存储目录，mongod启动时，<br>会在数据目录中创建mongod.lock文件，防止其他mongod进程使用此目录<br>mongod –dbpath // 默认数据目录 /data/db<br>mongod –port<br>mongod –fork //以守护进程的方式运行mongodb,创建服务端进程<br>mongod –logpath  –logappend //日志输出路径<br>mongod –bind_ip //绑定的ip<br>mongod –config</p>\n<h2 id=\"身份认证\"><a href=\"#身份认证\" class=\"headerlink\" title=\"身份认证\"></a>身份认证</h2><p>首先在非认证前提下，在数据库中创建用户<br>use mydb<br>db.addUser(‘admin’,’admin);<br>//开启认证<br>mongod –port=3308 –auth </p>\n<p>mongo访问开启认证的数据库<br>mongo localhost:3307/mydb -u admin -p admin     </p>\n<h2 id=\"数据备份\"><a href=\"#数据备份\" class=\"headerlink\" title=\"数据备份\"></a>数据备份</h2><p>mongodump 运行时备份的方法，产生的备份不一定是服务器数据的实时快照</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongodump -d yf_blogs -o C:\\data\\backup </div><div class=\"line\"> mongodump -h 192.168.20.81:3307 -d yf_blog -o C:\\data\\backup</div></pre></td></tr></table></figure>\n<p>mongonrestore  将mongodump备份的数据恢复到指定数据库中  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongonrestore -h 192.168.20.81:3307 -d yf_blogs123 --drop C:\\data\\backup\\yf_blogs</div></pre></td></tr></table></figure>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ol>\n<li>null</li>\n<li>boolean</li>\n<li>数值 shell默认使用64位浮点型数值{‘x’:3.14}</li>\n<li>字符串</li>\n<li>日期{‘x’:new Date()}</li>\n<li>正则 {‘x’:/foobar/i/}</li>\n<li>数组 {‘x’:[]}</li>\n<li>内嵌文档 {‘x’:[]}</li>\n<li>对象ID 是一个12字节的ID，是文档的唯一标示</li>\n</ol>\n<h2 id=\"node操作mongodb\"><a href=\"#node操作mongodb\" class=\"headerlink\" title=\"node操作mongodb\"></a>node操作mongodb</h2><ul>\n<li><h4 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h4><ol>\n<li><p>修改器</p>\n<p><em>$inc</em>  用于数字 增加减少整数、长整数、双精度浮点数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find()</div><div class=\"line\">// &#123; &quot;_id&quot; : ObjectId(&quot;578c3efee9bbab4f5d008fb0&quot;), &quot;name&quot; : &quot;ww&quot;, &quot;tel&quot; :         </div><div class=\"line\">    &quot;15727&quot;, &quot;age&quot; : 23, &quot;fav&quot; : &quot;js&quot; &#125;</div><div class=\"line\">  db.user.update(&#123;&quot;name&quot;:&quot;ww&quot;&#125;,&#123;&quot;$inc&quot;:&#123;&quot;age&quot;:1&#125;&#125;);</div></pre></td></tr></table></figure>\n<p><em>$set $unset</em> 增加、修改、删除键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;&quot;name&quot;:&quot;ww&quot;&#125;,&#123;&quot;$set&quot;:&#123;&quot;fav&quot;:&quot;tttttt&quot;&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\">db.user.update(&#123;&quot;name&quot;:&quot;ww&quot;&#125;,&#123;&quot;unset&quot;:&#123;&quot;fav&quot;:1&#125;&#125;)</div></pre></td></tr></table></figure>\n<p><strong>upset</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.blog.update(&#123;&#125;,&#123;&#125;,true) //不存在则创建，存在则更新,第三个参数为true</div><div class=\"line\">db.attachment.update(&#123;&apos;attId&apos;:&apos;123&apos;&#125;,&#123;&apos;$set&apos;:&#123;&apos;attName&apos;:&apos;123.png&apos;&#125;&#125;,true)</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组修改器</p>\n<p><em>$push $ne $addToSet</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">    db.blog.update(&#123;&apos;title&apos;:&apos;test&apos;&#125;,&#123;&apos;$push&apos;:&#123;&apos;comments&apos;:&#123;&apos;author&apos;:&quot;&quot;,&quot;content&quot;:&quot;&quot;&#125;&#125;&#125;)</div><div class=\"line\">$push会重复添加</div><div class=\"line\">$ne $addToSet 只会添加数组中没有的新元素</div><div class=\"line\"></div><div class=\"line\">$addToSet和$each组合使用，可以添加多个不同的值</div><div class=\"line\">db.test.update(&#123;&apos;name&apos;:&apos;ww&apos;&#125;,&#123;&apos;$addToSet&apos;:&#123;&apos;email&apos;:&#123;&apos;$each&apos;:[&apos;155@qq.com&apos;,&apos;155@163.com&apos;]&#125;&#125;&#125;)</div></pre></td></tr></table></figure>\n<p><em>删除</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$pop  从数组任一端删除元素 &#123;&apos;$pop&apos;:&#123;key:1&#125;&#125;//从尾删除 key:-1 //从头删除</div><div class=\"line\">$pull  删除指定元素 **会将匹配的元素全都删掉**</div></pre></td></tr></table></figure>\n<ol>\n<li>操作文档下的数组中的指定item项的内容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db_blog.updateOne(&#123;</div><div class=\"line\">    &apos;_id&apos;:DB.generatorObjectId(params.id),</div><div class=\"line\">    &apos;comments._id&apos;:DB.generatorObjectId(params.commentId)</div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">    &quot;$push&quot;:&#123;&quot;comments.$.apply&quot;:data&#125;</div><div class=\"line\">&#125;,function(err,doc)&#123;</div><div class=\"line\">    db.close();</div><div class=\"line\">    console.log(doc)</div><div class=\"line\">    cb(err,doc)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>  指定返回的键</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> 通过find的第二个参数控制</div><div class=\"line\">db.user.find(&#123;&#125;,&#123;&apos;username&apos;:1,&apos;password&apos;:1,&apos;age&apos;:0&#125;)</div><div class=\"line\">0 1 控制</div></pre></td></tr></table></figure>\n<p>  查询条件 $lt  $lte $gt $gte  $ne不相等</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">  db.users.find(&#123;&apos;age&apos;:&#123;</div><div class=\"line\">    &apos;$gte&apos;:18,</div><div class=\"line\">    &apos;$lte&apos;；30</div><div class=\"line\"> &#125;&#125;)</div><div class=\"line\">//查询18&lt;= age &lt;=30的user</div></pre></td></tr></table></figure>\n<p>  OR查询($in $nin  $or)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$in 用来查询 *一个键* 的多个值</div><div class=\"line\">$or 用来完成 *多个键值* 的任意给定值</div><div class=\"line\">    </div><div class=\"line\">db.user.find(&#123;&apos;age&apos;:&#123;$in:[18,19,20]&#125;&#125;);</div><div class=\"line\"> //查询age为18，19或20的</div><div class=\"line\">db.user.find(&#123;&apos;$or&apos;:[&#123;&quot;name&quot;:&quot;luyun&quot;&#125;,&#123;&quot;age&quot;:20&#125;]&#125;);</div><div class=\"line\">//查询name为luyun的或age为20的</div></pre></td></tr></table></figure>\n<p>  $not 是元条件句，可以用在任何其他条件上</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find( &#123;&quot;id_num&quot;:&#123;&quot;$mod&quot;:[5,1]&#125;&#125; )</div><div class=\"line\">db.user.find( &#123;&quot;id_num&quot;:&#123; &quot;$not&quot;:&#123; &quot;$mod&quot;:[5,1] &#125; &#125; &#125; )</div></pre></td></tr></table></figure>\n<p>  $exists  //键值是否存在</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find(&#123;&quot;age&quot;:&#123;&quot;$exists&quot;:true&#125;&#125;)</div></pre></td></tr></table></figure>\n<p>  查询数组</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$all 通过多个元素匹配数组</div><div class=\"line\">db.food.find(&#123;&apos;fruit&apos;:&#123;&apos;$all&apos;:[&apos;apple&apos;,&apos;banana&apos;]&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\">$size</div><div class=\"line\">$slice //指定返回数组的条数</div><div class=\"line\">db.blog,posts.findOne(&#123;&apos;title&apos;:&apos;123&apos;&#125;,&#123;&apos;comments&apos;:&#123;&apos;$slice&apos;:10/-10&#125; &#125;)</div><div class=\"line\">//查询内嵌数组从第n个开始，查询m个</div><div class=\"line\"> db_blog.find(</div><div class=\"line\">            &#123;</div><div class=\"line\">                &apos;_id&apos;: DB.generatorObjectId(params.id)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                comments: &#123;$slice: [n, m]&#125;,</div><div class=\"line\">            &#125;).toArray(function()&#123;&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"游标\"><a href=\"#游标\" class=\"headerlink\" title=\"游标\"></a>游标</h2><p>游标对象的方法</p>\n<pre><code>limit\nskip\nsort({&quot;username&quot;:1,&quot;age&quot;:-1})//按username升序，age降序排序\n</code></pre><h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">*count*</div><div class=\"line\">db.users.count() //查询数量</div><div class=\"line\"></div><div class=\"line\">*distinct*</div><div class=\"line\"></div><div class=\"line\">*group*</div><div class=\"line\">db.runCommand(&#123;&quot;group&quot;:&#123;</div><div class=\"line\">  &apos;ns&apos;:&apos;posts&apos;,//要进行分组的集合</div><div class=\"line\">  &apos;key&apos;:&apos;day&apos;,  //指定文档分组依据的键</div><div class=\"line\">  &apos;initial&apos;:&#123;&apos;time&apos;:0&#125;, //每一组reduce调用的初始时间</div><div class=\"line\">                       //每一组的所有成员都会使用这个累加器，所以改变会保留住</div><div class=\"line\">  &apos;$reduce&apos;:function(doc,prev)&#123;</div><div class=\"line\">          //当前文档，累加器文档（每一组都有一个独立的累加器）</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &apos;condition&apos;:&#123;&apos;day&apos;:&#123;&apos;$get&apos;:&apos;2016/08/08&apos;&#125;&#125;</div><div class=\"line\">  &apos;finalize&apos;:function()&#123;&#125; //作用于result中的每一个item,对结果进行修剪</div><div class=\"line\">  &apos;$keyf&apos;:function(x)&#123; //将函数作为键使用</div><div class=\"line\">    return x.category.toLowerCase()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\">*MapReduce*</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj32uplzy000009rt1wxitlvp","tag_id":"cj32upm0d000409rtf0s1ax6d","_id":"cj32upm0v000909rty7dompvy"},{"post_id":"cj32upm0p000709rtrr1mar9r","tag_id":"cj32upm0d000409rtf0s1ax6d","_id":"cj32upm0x000b09rtf8aaro1v"},{"post_id":"cj32upm0v000a09rt21mf00bg","tag_id":"cj32upm0u000809rty47xf6z9","_id":"cj32upm0z000e09rtif8sh6f7"},{"post_id":"cj32upm07000209rtkbsz59he","tag_id":"cj32upm0u000809rty47xf6z9","_id":"cj32upm11000g09rtpi77vswt"},{"post_id":"cj32upm0x000c09rtct86sl8l","tag_id":"cj32upm0d000409rtf0s1ax6d","_id":"cj32upm14000j09rt373ytpb1"},{"post_id":"cj32upm0j000509rtoyo1cun0","tag_id":"cj32upm0u000809rty47xf6z9","_id":"cj32upm16000l09rtct0kdad2"},{"post_id":"cj32upm0l000609rt3q6rkaye","tag_id":"cj32upm0u000809rty47xf6z9","_id":"cj32upm1c000p09rtxr97459b"},{"post_id":"cj32upm16000m09rttfl5dqdq","tag_id":"cj32upm0d000409rtf0s1ax6d","_id":"cj32upm1f000r09rtjdkrofvj"},{"post_id":"cj32upm10000f09rtf79lyl61","tag_id":"cj32upm19000n09rth7dgcogw","_id":"cj32upm1i000t09rt2n8sypgl"},{"post_id":"cj32upm11000h09rter8l4si9","tag_id":"cj32upm1g000s09rtku0h4ttz","_id":"cj32upm1o000v09rtskwvri9o"},{"post_id":"cj32upm14000k09rtq7y1mcus","tag_id":"cj32upm19000n09rth7dgcogw","_id":"cj32upm1p000x09rtz8md33ok"},{"post_id":"cj32upm1b000o09rtkwq9ldzn","tag_id":"cj32upm1p000w09rt5qhzt3y3","_id":"cj32upm1r000z09rtbudy9o90"},{"post_id":"cj32upm1e000q09rtwn4c5fld","tag_id":"cj32upm1r000y09rtrlodhotl","_id":"cj32upm1s001009rtgf4rs0tl"}],"Tag":[{"name":"javascript","_id":"cj32upm0d000409rtf0s1ax6d"},{"name":"angular","_id":"cj32upm0u000809rty47xf6z9"},{"name":"es6","_id":"cj32upm19000n09rth7dgcogw"},{"name":"react","_id":"cj32upm1g000s09rtku0h4ttz"},{"name":"ubuntu","_id":"cj32upm1p000w09rt5qhzt3y3"},{"name":"mongodb","_id":"cj32upm1r000y09rtrlodhotl"}]}}